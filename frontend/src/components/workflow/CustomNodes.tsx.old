import React from 'react'
import { 
  User, 
  Bot, 
  Wrench, 
  Database, 
  BookOpen, 
  Network, 
  Globe, 
  GitBranch, 
  CheckCircle 
} from 'lucide-react'

// Define NodeProps type locally
interface NodeProps {
  data?: any
  isConnectable?: boolean
  type?: string
}

// Define Handle components for compatibility
const Handle = ({ type, position, isConnectable, style, id, title }: any) => {
  // Handle component is not needed for Reaflow
  return null
}

const Position = {
  Top: 'top',
  Bottom: 'bottom',
  Left: 'left',
  Right: 'right',
}

// Base node component with bidirectional handles
const BaseNode = ({ data, isConnectable, type, icon: Icon }: any) => {
  const nodeStyles = {
    userinput: {
      background: '#dcfce7',
      border: '2px solid #22c55e',
      color: '#166534',
    },
    agent: {
      background: '#dbeafe',
      border: '2px solid #3b82f6',
      color: '#1d4ed8',
    },
    agenttool: {
      background: '#fed7aa',
      border: '2px solid #fb923c',
      color: '#ea580c',
    },
    vectorstore: {
      background: '#e9d5ff',
      border: '2px solid #a855f7',
      color: '#7c3aed',
    },
    knowledgebase: {
      background: '#e0e7ff',
      border: '2px solid #6366f1',
      color: '#4f46e5',
    },
    mcp: {
      background: '#fce7f3',
      border: '2px solid #ec4899',
      color: '#db2777',
    },
    apicall: {
      background: '#ccfbf1',
      border: '2px solid #14b8a6',
      color: '#0f766e',
    },
    router: {
      background: '#fef3c7',
      border: '2px solid #f59e0b',
      color: '#d97706',
    },
    finaloutput: {
      background: '#f3f4f6',
      border: '2px solid #6b7280',
      color: '#374151',
    },
    default: {
      background: '#ffffff',
      border: '2px solid #e0e0e0',
      color: '#424242',
    },
  }

  const style = nodeStyles[type as keyof typeof nodeStyles] || nodeStyles.default

  return (
    <div
      style={{
        ...style,
        padding: '12px 20px',
        borderRadius: '12px',
        fontSize: '14px',
        fontWeight: 500,
        minWidth: '180px',
        textAlign: 'center',
        position: 'relative',
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
        transition: 'all 0.2s ease',
      }}
    >
      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '4px' }}>
        {data.name && (
          <span style={{ 
            fontSize: '11px', 
            color: style.color,
            fontWeight: 400,
            opacity: 0.7
          }}>
            {data.name}
          </span>
        )}
        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: '8px' }}>
          {Icon && <Icon size={18} />}
          <span style={{ fontWeight: 600 }}>{data.label}</span>
        </div>
      </div>
    </div>
  )
}

// Custom UserInputNode with dynamic outputs
export const UserInputNode = ({ data, isConnectable }: any) => {
  const nodeStyle = {
    background: '#dcfce7',
    border: '2px solid #22c55e',
    color: '#166534',
  }

  // Calculate handle positions based on outputs count
  const outputs = data.outputs || []
  const maxOutputs = 30
  const outputCount = Math.min(outputs.length, maxOutputs)

  return (
    <div
      style={{
        ...nodeStyle,
        padding: '12px 20px',
        borderRadius: '12px',
        fontSize: '14px',
        fontWeight: 500,
        minWidth: '180px',
        textAlign: 'center',
        position: 'relative',
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
        transition: 'all 0.2s ease',
      }}
    >
      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '4px' }}>
        {data.name && (
          <span style={{ 
            fontSize: '11px', 
            color: nodeStyle.color,
            fontWeight: 400,
            opacity: 0.7
          }}>
            {data.name}
          </span>
        )}
        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: '8px' }}>
          <User size={18} />
          <span style={{ fontWeight: 600 }}>{data.label}</span>
        </div>
        {outputCount > 0 && (
          <div style={{ fontSize: '10px', opacity: 0.6, marginTop: '2px' }}>
            {outputCount} output{outputCount > 1 ? 's' : ''}
          </div>
        )}
      </div>
    </div>
  )
}

// Custom Agent Node with model display
export const AgentNode = ({ data, isConnectable }: any) => {
  const nodeStyle = {
    background: '#dbeafe',
    border: '2px solid #3b82f6',
    color: '#1d4ed8',
  }

  // Get model from parameters and trim whitespace
  const model = data.parameters?.model?.trim() || ''
  const hasModel = model.length > 0

  return (
    <div
      style={{
        ...nodeStyle,
        padding: '12px 20px',
        borderRadius: '12px',
        fontSize: '14px',
        fontWeight: 500,
        minWidth: '180px',
        textAlign: 'center',
        position: 'relative',
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
        transition: 'all 0.2s ease',
      }}
    >
      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '4px' }}>
        {data.name && (
          <span style={{ 
            fontSize: '11px', 
            color: nodeStyle.color,
            fontWeight: 400,
            opacity: 0.7
          }}>
            {data.name}
          </span>
        )}
        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: '8px' }}>
          <Bot size={18} />
          <span style={{ fontWeight: 600 }}>{data.label}</span>
        </div>
        {/* Model display */}
        <div style={{ 
          fontSize: '11px', 
          marginTop: '2px',
          color: hasModel ? nodeStyle.color : '#ef4444',
          opacity: hasModel ? 0.7 : 1,
          fontWeight: hasModel ? 400 : 500
        }}>
          {hasModel ? model : 'No model selected'}
        </div>
      </div>
    </div>
  )
}

export const AgentToolNode = (props: any) => {
  return <BaseNode {...props} type="agenttool" icon={Wrench} />
}

export const VectorStoreNode = (props: any) => {
  return <BaseNode {...props} type="vectorstore" icon={Database} />
}

export const KnowledgeBaseNode = (props: any) => {
  return <BaseNode {...props} type="knowledgebase" icon={BookOpen} />
}

export const MCPNode = (props: any) => {
  return <BaseNode {...props} type="mcp" icon={Network} />
}

export const APICallNode = (props: any) => {
  return <BaseNode {...props} type="apicall" icon={Globe} />
}

export const RouterNode = (props: any) => {
  return <BaseNode {...props} type="router" icon={GitBranch} />
}

export const FinalOutputNode = (props: any) => {
  return <BaseNode {...props} type="finaloutput" icon={CheckCircle} />
}

export const DefaultNode = (props: any) => {
  return <BaseNode {...props} type="default" />
}

// Node types object for React Flow compatibility
export const nodeTypes = {
  userinput: UserInputNode,
  agent: AgentNode,
  agenttool: AgentToolNode,
  vectorstore: VectorStoreNode,
  knowledgebase: KnowledgeBaseNode,
  mcp: MCPNode,
  apicall: APICallNode,
  router: RouterNode,
  finaloutput: FinalOutputNode,
  default: DefaultNode,
}