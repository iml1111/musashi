import React, { Suspense, lazy, useEffect, useState } from 'react'

// React Flow를 동적으로 임포트
const ReactFlowLazy = lazy(() => import('reactflow').then(module => ({
  default: module.ReactFlow
})))

const BackgroundLazy = lazy(() => import('reactflow').then(module => ({
  default: module.Background
})))

const ControlsLazy = lazy(() => import('reactflow').then(module => ({
  default: module.Controls
})))

const ReactFlowProviderLazy = lazy(() => import('reactflow').then(module => ({
  default: module.ReactFlowProvider
})))

interface LazyFlowCanvasProps {
  nodes: any[]
  edges: any[]
  onNodeClick?: (node: any) => void
  onPaneClick?: () => void
  onNodesChange?: (changes: any) => void
  onEdgesChange?: (changes: any) => void
  onConnect?: (connection: any) => void
  onEdgeClick?: (event: React.MouseEvent, edge: any) => void
  nodeTypes?: any
  edgeTypes?: any
  fitView?: boolean
  fitViewOptions?: any
  snapToGrid?: boolean
  snapGrid?: [number, number]
  connectionMode?: any
  panOnScroll?: boolean
  panOnScrollSpeed?: number
  panOnScrollMode?: any
  selectNodesOnDrag?: boolean
  selectionOnDrag?: boolean
}

const LoadingFallback = () => (
  <div style={{ 
    width: '100%', 
    height: '100%', 
    display: 'flex', 
    alignItems: 'center', 
    justifyContent: 'center',
    background: '#f0f0f0'
  }}>
    <div>
      <h3>Loading Workflow Editor...</h3>
      <p>Please wait while we initialize the canvas</p>
    </div>
  </div>
)

const LazyFlowCanvas: React.FC<LazyFlowCanvasProps> = (props) => {
  const [isReady, setIsReady] = useState(false)

  useEffect(() => {
    // 약간의 지연을 주어 React가 완전히 마운트되도록 함
    const timer = setTimeout(() => {
      setIsReady(true)
    }, 100)
    return () => clearTimeout(timer)
  }, [])

  if (!isReady) {
    return <LoadingFallback />
  }

  return (
    <Suspense fallback={<LoadingFallback />}>
      <ReactFlowProviderLazy>
        <div style={{ width: '100%', height: '100%' }}>
          <ReactFlowLazy
            nodes={props.nodes}
            edges={props.edges}
            onNodeClick={props.onNodeClick}
            onPaneClick={props.onPaneClick}
            onNodesChange={props.onNodesChange}
            onEdgesChange={props.onEdgesChange}
            onConnect={props.onConnect}
            onEdgeClick={props.onEdgeClick}
            nodeTypes={props.nodeTypes}
            edgeTypes={props.edgeTypes}
            fitView={props.fitView}
            fitViewOptions={props.fitViewOptions}
            snapToGrid={props.snapToGrid}
            snapGrid={props.snapGrid}
            connectionMode={props.connectionMode}
            panOnScroll={props.panOnScroll}
            panOnScrollSpeed={props.panOnScrollSpeed}
            panOnScrollMode={props.panOnScrollMode}
            selectNodesOnDrag={props.selectNodesOnDrag}
            selectionOnDrag={props.selectionOnDrag}
          >
            <ControlsLazy />
            <BackgroundLazy />
          </ReactFlowLazy>
        </div>
      </ReactFlowProviderLazy>
    </Suspense>
  )
}

export default LazyFlowCanvas