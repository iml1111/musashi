import React from 'react'
import { Handle, Position } from 'reactflow'

// Simple base node without icons to avoid potential import issues
const SimpleBaseNode = ({ data, type }: any) => {
  const nodeStyles: Record<string, any> = {
    userinput: {
      background: '#dcfce7',
      border: '2px solid #22c55e',
      color: '#166534',
    },
    agent: {
      background: '#dbeafe',
      border: '2px solid #3b82f6',
      color: '#1d4ed8',
    },
    agenttool: {
      background: '#fed7aa',
      border: '2px solid #fb923c',
      color: '#ea580c',
    },
    vectorstore: {
      background: '#e9d5ff',
      border: '2px solid #a855f7',
      color: '#7c3aed',
    },
    knowledgebase: {
      background: '#e0e7ff',
      border: '2px solid #6366f1',
      color: '#4f46e5',
    },
    mcp: {
      background: '#fce7f3',
      border: '2px solid #ec4899',
      color: '#db2777',
    },
    apicall: {
      background: '#ccfbf1',
      border: '2px solid #14b8a6',
      color: '#0f766e',
    },
    router: {
      background: '#fef3c7',
      border: '2px solid #f59e0b',
      color: '#d97706',
    },
    finaloutput: {
      background: '#f3f4f6',
      border: '2px solid #6b7280',
      color: '#374151',
    },
    default: {
      background: '#ffffff',
      border: '2px solid #e0e0e0',
      color: '#424242',
    },
  }

  const style = nodeStyles[type] || nodeStyles.default

  return (
    <div
      style={{
        ...style,
        padding: '12px 20px',
        borderRadius: '12px',
        fontSize: '14px',
        fontWeight: 500,
        minWidth: '180px',
        textAlign: 'center',
        position: 'relative',
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
      }}
    >
      <Handle
        type="target"
        position={Position.Top}
        style={{
          background: 'transparent',
          width: '10px',
          height: '10px',
          border: 'none',
          top: '-5px',
        }}
      />
      
      <div>{data?.label || 'Node'}</div>
      
      <Handle
        type="source"
        position={Position.Bottom}
        style={{
          background: 'transparent',
          width: '10px',
          height: '10px',
          border: 'none',
          bottom: '-5px',
        }}
      />
    </div>
  )
}

// Custom User Input Node
const SafeUserInputNode = ({ data }: any) => {
  const outputs = data?.outputs || []
  const outputCount = Math.min(outputs.length, 30)
  
  return (
    <div
      style={{
        background: '#dcfce7',
        border: '2px solid #22c55e',
        color: '#166534',
        padding: '12px 20px',
        borderRadius: '12px',
        fontSize: '14px',
        fontWeight: 500,
        minWidth: '180px',
        textAlign: 'center',
        position: 'relative',
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
      }}
    >
      <Handle
        type="target"
        position={Position.Top}
        style={{
          background: 'transparent',
          width: '10px',
          height: '10px',
          border: 'none',
          top: '-5px',
        }}
      />
      
      <div>
        <div style={{ fontWeight: 600 }}>{data?.label || 'User Input'}</div>
        {outputCount > 0 && (
          <div style={{ fontSize: '10px', opacity: 0.6, marginTop: '2px' }}>
            {outputCount} output{outputCount > 1 ? 's' : ''}
          </div>
        )}
      </div>
      
      {/* Dynamic bottom handles */}
      {outputs.slice(0, 30).map((output: any, index: number) => {
        const handleSpacing = outputCount > 0 ? Math.min(20, 200 / (outputCount + 1)) : 0
        const startOffset = outputCount > 0 ? -(outputCount - 1) * handleSpacing / 2 : 0
        
        return (
          <Handle
            key={`output-${index}`}
            id={`output-${output.key}`}
            type="source"
            position={Position.Bottom}
            style={{
              background: 'transparent',
              width: '8px',
              height: '8px',
              border: 'none',
              bottom: '-5px',
              left: `calc(50% + ${startOffset + index * handleSpacing}px)`,
              transform: 'translateX(-50%)',
            }}
            title={`${output.key} (${output.type})`}
          />
        )
      })}
    </div>
  )
}

// Custom Agent Node
const SafeAgentNode = ({ data }: any) => {
  const model = data?.parameters?.model?.trim() || ''
  const hasModel = model.length > 0

  return (
    <div
      style={{
        background: '#dbeafe',
        border: '2px solid #3b82f6',
        color: '#1d4ed8',
        padding: '12px 20px',
        borderRadius: '12px',
        fontSize: '14px',
        fontWeight: 500,
        minWidth: '180px',
        textAlign: 'center',
        position: 'relative',
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
      }}
    >
      <Handle
        type="target"
        position={Position.Top}
        style={{
          background: 'transparent',
          width: '10px',
          height: '10px',
          border: 'none',
          top: '-5px',
        }}
      />
      
      <div>
        <div style={{ fontWeight: 600 }}>{data?.label || 'Agent'}</div>
        <div style={{ 
          fontSize: '11px', 
          marginTop: '2px',
          color: hasModel ? '#1d4ed8' : '#ef4444',
          opacity: hasModel ? 0.7 : 1,
          fontWeight: hasModel ? 400 : 500
        }}>
          {hasModel ? model : 'No model selected'}
        </div>
      </div>
      
      <Handle
        type="source"
        position={Position.Bottom}
        style={{
          background: 'transparent',
          width: '10px',
          height: '10px',
          border: 'none',
          bottom: '-5px',
        }}
      />
    </div>
  )
}

// Create individual node components
const AgentToolNode = (props: any) => {
  return <SimpleBaseNode {...props} type="agenttool" />
}

const VectorStoreNode = (props: any) => {
  return <SimpleBaseNode {...props} type="vectorstore" />
}

const KnowledgeBaseNode = (props: any) => {
  return <SimpleBaseNode {...props} type="knowledgebase" />
}

const MCPNode = (props: any) => {
  return <SimpleBaseNode {...props} type="mcp" />
}

const APICallNode = (props: any) => {
  return <SimpleBaseNode {...props} type="apicall" />
}

const RouterNode = (props: any) => {
  return <SimpleBaseNode {...props} type="router" />
}

const FinalOutputNode = (props: any) => {
  return <SimpleBaseNode {...props} type="finaloutput" />
}

const DefaultNode = (props: any) => {
  return <SimpleBaseNode {...props} type="default" />
}

// Export safe node types
export const safeNodeTypes = {
  userinput: SafeUserInputNode,
  agent: SafeAgentNode,
  agenttool: AgentToolNode,
  vectorstore: VectorStoreNode,
  knowledgebase: KnowledgeBaseNode,
  mcp: MCPNode,
  apicall: APICallNode,
  router: RouterNode,
  finaloutput: FinalOutputNode,
  default: DefaultNode,
}