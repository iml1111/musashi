import React, { useState, useEffect } from 'react'
import { useParams, Link } from 'react-router-dom'
import ReactFlow, {
  Node,
  Edge,
  Controls,
  MiniMap,
  Background,
  ReactFlowProvider,
} from 'reactflow'
import 'reactflow/dist/style.css'
import { ArrowLeft, FileText, AlertCircle } from 'lucide-react'
import { workflowService } from '../services/workflow'
import { Workflow } from '../types/workflow'

const SharedWorkflow: React.FC = () => {
  const { shareToken } = useParams()
  const [workflow, setWorkflow] = useState<Workflow | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [nodes, setNodes] = useState<Node[]>([])
  const [edges, setEdges] = useState<Edge[]>([])

  useEffect(() => {
    const loadSharedWorkflow = async () => {
      if (!shareToken) {
        setError('Invalid share link')
        setLoading(false)
        return
      }

      try {
        setLoading(true)
        const data = await workflowService.getSharedWorkflow(shareToken)
        setWorkflow(data)
        
        // Convert workflow nodes/edges to React Flow format
        if (data.nodes && data.nodes.length > 0) {
          const flowNodes = data.nodes.map(node => ({
            id: node.id,
            type: node.type || 'default',
            data: { label: node.label },
            position: { 
              x: node.position_x || Math.random() * 400, 
              y: node.position_y || Math.random() * 400 
            }
          }))
          setNodes(flowNodes)
        } else {
          // Default node if empty
          setNodes([{
            id: '1',
            type: 'input',
            data: { label: 'Start' },
            position: { x: 250, y: 5 }
          }])
        }
        
        if (data.edges) {
          setEdges(data.edges.map(edge => ({
            id: edge.id,
            source: edge.source,
            target: edge.target,
            label: edge.label
          })))
        }
      } catch (err) {
        console.error('Failed to load shared workflow:', err)
        setError('Workflow not found or link has expired')
      } finally {
        setLoading(false)
      }
    }

    loadSharedWorkflow()
  }, [shareToken])

  if (loading) {
    return (
      <div className="h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-musashi-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading workflow...</p>
        </div>
      </div>
    )
  }

  if (error || !workflow) {
    return (
      <div className="h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center max-w-md">
          <AlertCircle className="w-12 h-12 text-red-500 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Unable to load workflow</h2>
          <p className="text-gray-600 mb-6">{error || 'Something went wrong'}</p>
          <Link
            to="/"
            className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-musashi-600 hover:bg-musashi-700"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            Go to Home
          </Link>
        </div>
      </div>
    )
  }

  return (
    <div className="h-screen flex flex-col">
      <header className="bg-white shadow-sm border-b px-4 py-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <Link 
              to="/"
              className="p-2 text-gray-400 hover:text-gray-600"
              title="Go to Home"
            >
              <ArrowLeft className="w-5 h-5" />
            </Link>
            <div>
              <div className="flex items-center space-x-2">
                <h1 className="text-lg font-semibold text-gray-900">
                  {workflow.name}
                </h1>
                <span className="px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded-full">
                  Read-only
                </span>
              </div>
              <p className="text-sm text-gray-500">
                {workflow.description || 'Shared AI agent workflow'}
              </p>
            </div>
          </div>
          <div className="flex items-center space-x-2 text-sm text-gray-600">
            <FileText className="w-4 h-4" />
            <span>Viewing shared workflow</span>
          </div>
        </div>
      </header>

      <div className="flex-1 relative">
        <ReactFlowProvider>
          <ReactFlow
            nodes={nodes}
            edges={edges}
            nodesDraggable={false}
            nodesConnectable={false}
            elementsSelectable={false}
            className="bg-gray-50"
          >
            <Background />
            <Controls showInteractive={false} />
            <MiniMap />
          </ReactFlow>
        </ReactFlowProvider>
      </div>
    </div>
  )
}

export default SharedWorkflow