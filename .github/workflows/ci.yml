name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
        ports:
          - 27017:27017
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install backend dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install ruff
    
    - name: Lint backend
      run: |
        cd backend
        ruff check .
    
    - name: Test backend
      run: |
        cd backend
        python -m pytest
      env:
        MONGODB_URL: mongodb://admin:password123@localhost:27017/musashi_test?authSource=admin
        DATABASE_NAME: musashi_test
        SECRET_KEY: test-secret-key

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Lint frontend
      run: |
        cd frontend
        npm run lint
    
    - name: Test frontend
      run: |
        cd frontend
        npm run test:coverage
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker images
      run: |
        docker compose build
    
    - name: Test Docker compose
      env:
        SECRET_KEY: test-secret-key-for-ci
        MONGODB_URL: mongodb://localhost:27017
        DATABASE_NAME: musashi_test
      run: |
        docker compose up -d
        sleep 60
        curl -f http://localhost:8080/ || exit 1
        curl -f http://localhost:8080/api/v1/health || exit 1
        docker compose down