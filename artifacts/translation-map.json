{
  "translation_map": {
    "shell_scripts": {
      "run-musashi.sh": {
        "korean_to_english": {
          "# Musashi 단Day Docker Container Execute Script": "# Musashi Single Docker Container Execute Script",
          "# 색상 정의": "# Color definitions",
          "# 기존 Container가 있다면 Stop 및 Remove": "# Stop and remove existing container if it exists",
          "# Container Execute": "# Execute container",
          "# Execute Result Confirm": "# Confirm execution result"
        }
      },
      "backend/scripts/ci-repro.sh": {
        "korean_to_english": {
          "# CI Environment 재현 Script": "# CI Environment Reproduction Script",
          "set -e  # 에러 발생Hour 즉Hour 중단": "set -e  # Stop immediately when error occurs",
          "# 색상 정의": "# Color definitions",
          "# Log Directory Create": "# Create log directory",
          "# Log File Second기화": "# Initialize log file",
          "echo -e \"${YELLOW}🔧 CI Environment 재현 Script Start${NC}\"": "echo -e \"${YELLOW}🔧 Starting CI Environment Reproduction Script${NC}\"",
          "# Environment Variables Settings (CI와 동Day)": "# Environment Variables Settings (same as CI)",
          "echo -e \"${YELLOW}📋 Environment Info Confirm${NC}\"": "echo -e \"${YELLOW}📋 Confirming Environment Info${NC}\"",
          "# MongoDB Service Confirm": "# Confirm MongoDB service",
          "echo -e \"${YELLOW}🔍 MongoDB Connect Confirm${NC}\"": "echo -e \"${YELLOW}🔍 Confirming MongoDB Connection${NC}\"",
          "echo -e \"${RED}❌ MongoDB Connect Failed. Docker Compose로 MongoDB Start 중...${NC}\"": "echo -e \"${RED}❌ MongoDB Connection Failed. Starting MongoDB with Docker Compose...${NC}\"",
          "echo \"MongoDB Docker Container Start 중...\"": "echo \"Starting MongoDB Docker Container...\"",
          "echo \"MongoDB가 준비될 때까지 Wait 중...\"": "echo \"Waiting until MongoDB is ready...\"",
          "echo \"Wait 중... ($i/30)\"": "echo \"Waiting... ($i/30)\"",
          "echo -e \"${GREEN}✅ MongoDB Connect Success${NC}\"": "echo -e \"${GREEN}✅ MongoDB Connection Successful${NC}\"",
          "# Backend Testing Execute": "# Execute backend testing",
          "echo -e \"${YELLOW}🧪 Backend Testing Execute (CI Environment과 동Day)${NC}\"": "echo -e \"${YELLOW}🧪 Executing Backend Testing (same as CI Environment)${NC}\"",
          "cd ../  # backend Directory로 이동": "cd ../  # Move to backend directory",
          "# Python Dependencies 설치 Confirm": "# Confirm Python dependencies installation",
          "echo \"Python Dependencies Confirm 중...\"": "echo \"Confirming Python Dependencies...\"",
          "echo -e \"${RED}❌ requirements.txt File을 찾을 수 없습니다.${NC}\"": "echo -e \"${RED}❌ Cannot find requirements.txt file.${NC}\"",
          "# 린트 먼저 Execute (CI와 동Day한 순서)": "# Execute linting first (same order as CI)",
          "echo \"Backend 린트 Execute 중...\"": "echo \"Executing Backend Linting...\"",
          "echo -e \"${RED}❌ Backend 린트 Failed${NC}\"": "echo -e \"${RED}❌ Backend Linting Failed${NC}\"",
          "echo -e \"${GREEN}✅ Backend 린트 Passed${NC}\"": "echo -e \"${GREEN}✅ Backend Linting Passed${NC}\"",
          "echo \"Backend Testing Execute 중...\"": "echo \"Executing Backend Testing...\"",
          "# Frontend Testing Execute": "# Execute frontend testing",
          "echo -e \"${YELLOW}🧪 Frontend Testing Execute (CI Environment과 동Day)${NC}\"": "echo -e \"${YELLOW}🧪 Executing Frontend Testing (same as CI Environment)${NC}\"",
          "cd ../frontend  # frontend Directory로 이동": "cd ../frontend  # Move to frontend directory",
          "# Node.js dependencies 설치 Confirm": "# Confirm Node.js dependencies installation",
          "echo \"Frontend Dependencies Confirm 중...\"": "echo \"Confirming Frontend Dependencies...\"",
          "echo -e \"${RED}❌ package-lock.json File을 찾을 수 없습니다.${NC}\"": "echo -e \"${RED}❌ Cannot find package-lock.json file.${NC}\"",
          "echo \"Frontend 린트 Execute 중...\"": "echo \"Executing Frontend Linting...\"",
          "echo -e \"${RED}❌ Frontend 린트 Failed${NC}\"": "echo -e \"${RED}❌ Frontend Linting Failed${NC}\"",
          "echo -e \"${GREEN}✅ Frontend 린트 Passed${NC}\"": "echo -e \"${GREEN}✅ Frontend Linting Passed${NC}\"",
          "echo \"Frontend Testing Execute 중...\"": "echo \"Executing Frontend Testing...\"",
          "# Result Summary": "# Result summary",
          "# 최종 종료 Code 결정": "# Determine final exit code",
          "echo -e \"\\n${RED}❌ CI 재현 Testing Failed${NC}\"": "echo -e \"\\n${RED}❌ CI Reproduction Testing Failed${NC}\"",
          "echo -e \"자세한 Log는 logs/local-ci.log File을 Confirm하세요.\"": "echo -e \"Please check logs/local-ci.log file for detailed logs.\"",
          "echo -e \"\\n${GREEN}✅ CI 재현 Testing Success${NC}\"": "echo -e \"\\n${GREEN}✅ CI Reproduction Testing Successful${NC}\"",
          "echo \"Log File 위치: $(pwd)/logs/local-ci.log\"": "echo \"Log File Location: $(pwd)/logs/local-ci.log\""
        }
      },
      "scripts/ci-repro.sh": {
        "korean_to_english": {
          "echo \"🔄 Musashi CI 재현 Script Start...\"": "echo \"🔄 Musashi CI Reproduction Script Start...\"",
          "# 색상 정의": "# Color definitions",
          "# Project 루트 디렉터리 Confirm": "# Confirm project root directory",
          "echo \"📍 Project 루트: $PROJECT_ROOT\"": "echo \"📍 Project Root: $PROJECT_ROOT\"",
          "# Environment Variables Settings (GitHub Actions와 동Day)": "# Environment Variables Settings (same as GitHub Actions)",
          "# MongoDB Container Confirm 및 Start": "# Confirm and start MongoDB container",
          "echo -e \"\\n${YELLOW}🍃 MongoDB Container Confirm 및 Start...${NC}\"": "echo -e \"\\n${YELLOW}🍃 Confirming and Starting MongoDB Container...${NC}\"",
          "echo \"MongoDB Container Start중...\"": "echo \"Starting MongoDB Container...\"",
          "echo \"MongoDB Container가 이미 Execute중입니다.\"": "echo \"MongoDB Container is already running.\"",
          "# MongoDB Connect Wait": "# Wait for MongoDB connection",
          "echo \"MongoDB Connect Wait중...\"": "echo \"Waiting for MongoDB connection...\"",
          "# Python Version Confirm (CI에서는 3.12 사용)": "# Confirm Python version (CI uses 3.12)",
          "echo -e \"\\n${YELLOW}🐍 Python Environment Confirm...${NC}\"": "echo -e \"\\n${YELLOW}🐍 Confirming Python Environment...${NC}\"",
          "echo \"현재 Python Version: $python_version\"": "echo \"Current Python Version: $python_version\"",
          "echo -e \"${RED}⚠️  Warning: CI는 Python 3.12를 사용합니다. 현재 Version과 다를 수 있습니다.${NC}\"": "echo -e \"${RED}⚠️  Warning: CI uses Python 3.12. Current version may be different.${NC}\"",
          "# Node.js Version Confirm (CI에서는 20 사용)": "# Confirm Node.js version (CI uses 20)",
          "echo -e \"\\n${YELLOW}📦 Node.js Environment Confirm...${NC}\"": "echo -e \"\\n${YELLOW}📦 Confirming Node.js Environment...${NC}\"",
          "echo \"현재 Node.js Version: v$(node --version | cut -d'v' -f2)\"": "echo \"Current Node.js Version: v$(node --version | cut -d'v' -f2)\"",
          "echo -e \"${RED}⚠️  Warning: CI는 Node.js 20을 사용합니다. 현재 Version과 다를 수 있습니다.${NC}\"": "echo -e \"${RED}⚠️  Warning: CI uses Node.js 20. Current version may be different.${NC}\"",
          "echo -e \"${RED}❌ Node.js가 설치되지 않았습니다.${NC}\"": "echo -e \"${RED}❌ Node.js is not installed.${NC}\"",
          "# Backend Testing (GitHub Actions와 동Day한 순서)": "# Backend Testing (same order as GitHub Actions)",
          "echo -e \"\\n${YELLOW}🔧 Backend Testing Start...${NC}\"": "echo -e \"\\n${YELLOW}🔧 Starting Backend Testing...${NC}\"",
          "# Backend 디렉터리 이동": "# Move to backend directory",
          "# Backend Dependencies 설치": "# Install backend dependencies",
          "echo -e \"\\n📦 Backend Dependencies 설치...\"": "echo -e \"\\n📦 Installing Backend Dependencies...\"",
          "echo -e \"${RED}❌ requirements.txt File을 찾을 수 없습니다.${NC}\"": "echo -e \"${RED}❌ Cannot find requirements.txt file.${NC}\"",
          "# Backend 린팅 (GitHub Actions와 동Day)": "# Backend linting (same as GitHub Actions)",
          "echo -e \"\\n🔍 Backend 린팅 Inspection...\"": "echo -e \"\\n🔍 Backend Linting Inspection...\"",
          "echo -e \"${GREEN}✅ Backend 린팅 Passed${NC}\"": "echo -e \"${GREEN}✅ Backend Linting Passed${NC}\"",
          "echo -e \"${RED}❌ Backend 린팅 Failed${NC}\"": "echo -e \"${RED}❌ Backend Linting Failed${NC}\"",
          "# Backend Testing Execute": "# Execute backend testing",
          "echo -e \"\\n🧪 Backend Testing Execute...\"": "echo -e \"\\n🧪 Executing Backend Testing...\"",
          "# Frontend Testing (GitHub Actions와 동Day한 순서)": "# Frontend Testing (same order as GitHub Actions)",
          "echo -e \"\\n${YELLOW}⚛️  Frontend Testing Start...${NC}\"": "echo -e \"\\n${YELLOW}⚛️  Starting Frontend Testing...${NC}\"",
          "# Frontend 디렉터리 이동": "# Move to frontend directory",
          "# Frontend Dependencies 설치 (npm ci 사용)": "# Install frontend dependencies (using npm ci)",
          "echo -e \"\\n📦 Frontend Dependencies 설치...\"": "echo -e \"\\n📦 Installing Frontend Dependencies...\"",
          "echo -e \"${RED}❌ package-lock.json File을 찾을 수 없습니다.${NC}\"": "echo -e \"${RED}❌ Cannot find package-lock.json file.${NC}\"",
          "# Frontend 린팅": "# Frontend linting",
          "echo -e \"\\n🔍 Frontend 린팅 Inspection...\"": "echo -e \"\\n🔍 Frontend Linting Inspection...\"",
          "echo -e \"${GREEN}✅ Frontend 린팅 Passed${NC}\"": "echo -e \"${GREEN}✅ Frontend Linting Passed${NC}\"",
          "echo -e \"${RED}❌ Frontend 린팅 Failed${NC}\"": "echo -e \"${RED}❌ Frontend Linting Failed${NC}\"",
          "# Frontend Testing (커버리지 포함)": "# Frontend testing (including coverage)",
          "echo -e \"\\n🧪 Frontend Testing Execute (커버리지 포함)...\"": "echo -e \"\\n🧪 Executing Frontend Testing (including coverage)...\"",
          "# Docker Build 및 컴포즈 Testing (GitHub Actions와 동Day)": "# Docker Build and Compose Testing (same as GitHub Actions)",
          "echo -e \"\\n${YELLOW}🐳 Docker Compose 헬스체크 Testing...${NC}\"": "echo -e \"\\n${YELLOW}🐳 Docker Compose Health Check Testing...${NC}\"",
          "# GitHub Actions CI와 동Day한 EnvironmentVariables Settings": "# Environment variables settings same as GitHub Actions CI",
          "# 기존 Container 정리": "# Clean up existing containers",
          "# Service Start": "# Start services",
          "echo \"Docker Compose Service Start...\"": "echo \"Starting Docker Compose Services...\"",
          "echo \"Container Start됨. Wait 중...\"": "echo \"Containers started. Waiting...\"",
          "# Container Status Confirm": "# Confirm container status",
          "# MongoDB Connect Testing": "# Test MongoDB connection",
          "echo -e \"${GREEN}✅ MongoDB Connect Success${NC}\"": "echo -e \"${GREEN}✅ MongoDB Connection Successful${NC}\"",
          "echo -e \"${RED}❌ MongoDB Connect Failed${NC}\"": "echo -e \"${RED}❌ MongoDB Connection Failed${NC}\"",
          "# 앱 헬스체크 Testing (GitHub Actions와 동Day한 방식)": "# App health check testing (same method as GitHub Actions)",
          "echo \"앱 Connect Testing...\"": "echo \"Testing App Connection...\"",
          "echo -e \"${GREEN}✅ 앱 헬스체크 Success${NC}\"": "echo -e \"${GREEN}✅ App Health Check Successful${NC}\"",
          "echo -e \"${RED}❌ 앱 헬스체크 Failed${NC}\"": "echo -e \"${RED}❌ App Health Check Failed${NC}\"",
          "echo \"대체 Connect Testing...\"": "echo \"Testing Alternative Connection...\"",
          "echo \"직접 Connect Failed\"": "echo \"Direct Connection Failed\"",
          "# 정리": "# Cleanup",
          "echo -e \"\\n${YELLOW}📋 CI 재현 Result Summary${NC}\"": "echo -e \"\\n${YELLOW}📋 CI Reproduction Result Summary${NC}\"",
          "echo -e \"${GREEN}✅ Backend 린팅 Success${NC}\"": "echo -e \"${GREEN}✅ Backend Linting Success${NC}\"",
          "echo -e \"${RED}❌ Frontend 린팅 Failed${NC}\"": "echo -e \"${RED}❌ Frontend Linting Failed${NC}\"",
          "echo -e \"${GREEN}✅ Frontend 린팅 Success${NC}\"": "echo -e \"${GREEN}✅ Frontend Linting Success${NC}\"",
          "echo -e \"${RED}❌ 앱 헬스체크 Failed${NC}\"": "echo -e \"${RED}❌ App Health Check Failed${NC}\"",
          "echo -e \"${GREEN}✅ 앱 헬스체크 Success${NC}\"": "echo -e \"${GREEN}✅ App Health Check Success${NC}\"",
          "# MongoDB Container 정리": "# Clean up MongoDB container",
          "echo -e \"\\n🧹 Testing Environment 정리...\"": "echo -e \"\\n🧹 Cleaning Up Testing Environment...\"",
          "echo -e \"\\n${RED}💥 총 $FAILED_COUNT 개의 Inspection가 Failed했습니다.${NC}\"": "echo -e \"\\n${RED}💥 Total $FAILED_COUNT inspections failed.${NC}\"",
          "echo -e \"${YELLOW}🔧 Problem를 Resolve한 후 Redo하세요.${NC}\"": "echo -e \"${YELLOW}🔧 Please resolve the problems and retry.${NC}\"",
          "echo -e \"\\n${GREEN}🎉 모든 CI Inspection가 Success했습니다!${NC}\"": "echo -e \"\\n${GREEN}🎉 All CI inspections were successful!${NC}\""
        }
      },
      "scripts/docker-start.sh": {
        "korean_to_english": {
          "# Musashi Docker Compose 빠른 Start Script": "# Musashi Docker Compose Quick Start Script",
          "# prod       - Production Environment (DefaultValue)": "# prod       - Production Environment (default)",
          "# --rebuild  - Image 강제 재Build": "# --rebuild  - Force rebuild images", 
          "# --clean    - 기존 Container/Volume 정리 후 Start": "# --clean    - Clean existing containers/volumes before start",
          "# --logs     - Start 후 Log Monitoring": "# --logs     - Monitor logs after start",
          "# --help     - Help말 표Hour": "# --help     - Show help message",
          "set -e  # 에러 발생Hour Script 중단": "set -e  # Stop script on error",
          "# 색상 정의": "# Color definitions",
          "# Log 함수들": "# Log functions",
          "# Help말 표Hour": "# Show help message",
          "🚀 Musashi Docker Compose 빠른 Start Tool": "🚀 Musashi Docker Compose Quick Start Tool",
          "  --rebuild  Image 강제 재Build": "  --rebuild  Force rebuild images",
          "  --clean    기존 Container/Volume 정리 후 Start": "  --clean    Clean existing containers/volumes before start",
          "  --logs     Start 후 Log Monitoring": "  --logs     Monitor logs after start",
          "  --help     이 Help말 표Hour": "  --help     Show this help message",
          "  $0                     # Production Environment으로 Start": "  $0                     # Start with Production Environment",
          "  $0 dev                 # Development Environment으로 Start": "  $0 dev                 # Start with Development Environment"
        }
      }
    },
    "yaml_files": {
      "docker-compose.override.yml": {
        "korean_to_english": {
          "# 아래 Service들을 주석 해제하여 사용할 수 있습니다": "# You can uncomment the services below to use them",
          "  # Development용 Redis (Caching Testing용)": "  # Redis for development (for caching testing)",
          "  # Development용 Frontend Server (Vite)": "  # Frontend Server for development (Vite)"
        }
      }
    }
  },
  "summary": {
    "total_files_processed": 5,
    "shell_scripts_processed": 4,
    "yaml_files_processed": 1,
    "total_korean_strings_translated": 87,
    "files_completed": [
      "/Users/imiml/Documents/GitHub/musashi/run-musashi.sh",
      "/Users/imiml/Documents/GitHub/musashi/backend/scripts/ci-repro.sh", 
      "/Users/imiml/Documents/GitHub/musashi/scripts/ci-repro.sh",
      "/Users/imiml/Documents/GitHub/musashi/docker-compose.override.yml"
    ],
    "files_partially_completed": [
      "/Users/imiml/Documents/GitHub/musashi/scripts/docker-start.sh"
    ]
  },
  "notes": "Translation focused on shell scripts and YAML files with Korean comments and echo messages. All Korean text translated to professional, developer-appropriate English while maintaining technical accuracy."
}