{
  "  # Development용 Frontend 서버 (Vite)": "  # Development용 Frontend Server (Vite)",
  "  # Development용 Redis (캐싱 Testing용)": "  # Development용 Redis (Caching Testing용)",
  "# MongoDB 웹 관리 도구": "# MongoDB Web Management Tool",
  "아래 Service들을 주석 해제하여 사용할 수 있습니다": "아래 Service들을 주석 해제하여 사용할 수 있습니다",
  "# 아래 서비스들을 주석 해제하여 사용할 수 있습니다": "# 아래 Service들을 주석 해제하여 사용할 수 있습니다",
  "**담당**: Musashi Development팀": "**Responsible**: Musashi Development팀",
  "**버전**: 1.0.0": "**Version**: 1.0.0",
  "**Create일**: 2025년 1월 11일  ": "**CreateDay**: 2025Year 1Month 11Day  ",
  "🔗 Reference 자료": "🔗 Reference 자료",
  "# 🔗 Reference 자료": "# 🔗 Reference 자료",
  "# # 🔗 참고 자료": "# # 🔗 Reference 자료",
  "   - 자동화 Deployment 파이프라인": "   - Automation Deployment 파이프라인",
  "- 메트릭 수집 강화": "- Metric 수집 강화",
  "   - Log 구조화": "   - Log Structure화",
  "**운영 개선**": "**운영 개선**",
  "3. **운영 개선**": "3. **운영 개선**",
  "- 캐싱 전략 개선": "- Caching 전략 개선",
  "   - 데이터베이스 Connect 풀링": "   - Database Connect Pull링",
  "- CDN 통합": "- CDN Integration",
  "- Secrets 관리 개선": "- Secrets Management 개선",
  "- 취약점 스캔 자동화": "- 취약점 스캔 Automation",
  "   - 정기적 베이스 이미지 Update": "   - 정기적 베이스 Image Update",
  "**Security 강화**": "**Security 강화**",
  "1. **Security 강화**": "1. **Security 강화**",
  "🎯 다음 Step 권장사항": "🎯 다음 Step 권장사항",
  "# 🎯 다음 Step 권장사항": "# 🎯 다음 Step 권장사항",
  "# # 🎯 다음 단계 권장사항": "# # 🎯 다음 Step 권장사항",
  "- [ ] 알람 설정": "- [ ] 알람 Settings",
  "- [ ] Log 집계 설정": "- [ ] Log 집계 Settings",
  "- [ ] 애플리케이션 헬스체크 Monitoring  ": "- [ ] 애플리케이션 헬스체크 Monitoring  ",
  "- [ ] 컨테이너 리소스 사용량 Monitoring": "- [ ] Container Resource 사Capacity Monitoring",
  "### Monitoring 설정": "# ## Monitoring Settings",
  "- [ ] Log 출력 정상 Confirm": "- [ ] Log Output 정상 Confirm",
  "- [ ] Performance Testing 완료": "- [ ] Performance Testing Complete",
  "- [ ] Security 스캔 Passed (Trivy)": "- [ ] Security 스캔 Passed (Trivy)",
  "- [ ] 헬스체크 Passed Confirm": "- [ ] 헬스체크 Passed Confirm",
  "- [ ] Optimization된 Dockerfile로 Build Success": "- [ ] Optimization된 Dockerfile로 Build Success",
  "Deployment 전 Confirm사항": "Deployment 전 Confirm사항",
  "# Deployment 전 Confirm사항": "# Deployment 전 Confirm사항",
  "## Deployment 전 Confirm사항": "# # Deployment 전 Confirm사항",
  "### Deployment 전 Confirm사항": "# # # Deployment 전 Confirm사항",
  "📋 체크리스트": "📋 체크리스트",
  "# 📋 체크리스트": "# 📋 체크리스트",
  "# # 📋 체크리스트": "# # 📋 체크리스트",
  "## 🔄 CI/CD 통합 Example": "# # 🔄 CI/CD Integration Example",
  "- Build 의존성 정리": "- Build Dependencies 정리",
  "- 불필요한 패키지 Remove": "- 불필요한 패Key지 Remove",
  "- Alpine Linux 최신 Security Update": "- Alpine Linux 최신 Security Update",
  "### 3. 이미지 Security": "# ## 3. Image Security",
  "- Security 헤더 Apply": "- Security 헤더 Apply",
  "- 불필요한 포트 노출 차단": "- 불필요한 Port 노출 Block",
  "- 비특권 포트 8080 사용": "- 비특권 Port 8080 사용",
  "### 2. 네트워크 Security": "# ## 2. Network Security",
  "- 최소 권한 원칙 Apply": "- Minimum Permission 원칙 Apply",
  "- 전용 `musashi` 사용자 (UID 1001)": "- 전용 `musashi` User (UID 1001)",
  "- Root 사용자 실행 금지": "- Root User Execute 금지",
  "# ## 1. 사용자 권한": "# ## 1. User Permission",
  "🛡️ Security 개선사항": "🛡️ Security 개선사항",
  "# 🛡️ Security 개선사항": "# 🛡️ Security 개선사항",
  "## 🛡️ Security 개선사항": "# # 🛡️ Security 개선사항",
  "| 정적 자원 로드 시간 | ~800ms | ~200ms | 75% ↓ |": "| 정적 Resource 로드 Time | ~800ms | ~200ms | 75% ↓ |",
  "| 메모리 사용량 | ~180MB | ~120MB | 33% ↓ |": "| Memory 사Capacity | ~180MB | ~120MB | 33% ↓ |",
  "| 컨테이너 Start 시간 | ~15초 | ~8초 | 47% ↓ |": "| Container Start Time | ~15Second | ~8Second | 47% ↓ |",
  "| 메트릭 | 기존 | Optimization | 개선도 |": "| Metric | 기존 | Optimization | 개선도 |",
  "런타임 Performance  ": "런타임 Performance  ",
  "# 런타임 Performance  ": "# 런타임 Performance  ",
  "## 런타임 Performance  ": "# # 런타임 Performance  ",
  "### 런타임 Performance  ": "# # # 런타임 Performance  ",
  "| 이미지 레이어 수 | 15개 | 12개 | 20% ↓ |": "| Image 레이어 수 | 15개 | 12개 | 20% ↓ |",
  "| Cache Build 시간 | ~3분 | ~1분 | 67% ↓ |": "| Cache Build Time | ~3Minute | ~1Minute | 67% ↓ |",
  "| 첫 Build 시간 | ~8분 | ~6분 | 25% ↓ |": "| 첫 Build Time | ~8Minute | ~6Minute | 25% ↓ |",
  "📈 Performance 벤치마크": "📈 Performance 벤치마크",
  "# 📈 Performance 벤치마크": "# 📈 Performance 벤치마크",
  "## 📈 Performance 벤치마크": "# # 📈 Performance 벤치마크",
  "Security 강화": "Security 강화",
  "# Security 강화": "# Security 강화",
  "## Security 강화": "# # Security 강화",
  "### Security 강화": "# # # Security 강화",
  "정적 Resource Caching": "정적 Resource Caching",
  "# 정적 자원 캐싱": "# 정적 Resource Caching",
  "Gzip 압축": "Gzip 압축",
  "# Gzip 압축": "# Gzip 압축",
  "## 🔧 Nginx 설정 Optimization": "# # 🔧 Nginx Settings Optimization",
  "- 레지스트리 푸시": "- 레지스트리 푸Hour",
  "  - Security 스캔 (Trivy 지원)": "  - Security 스캔 (Trivy Support)",
  "  - 자동 Testing": "  - Auto Testing",
  "- 멀티플랫폼 지원": "- 멀티Platform Support",
  "- **특징**:": "- **특징**:",
  "- **기능**: 종합적인 Build 자동화 스크립트": "- **Feature**: 종합적인 Build Automation Script",
  "- **특징**: 레이어별 캐싱, 종Properties 관리": "- **특징**: 레이어별 Caching, 종Properties Management",
  "- **기능**: Build Cache Optimization를 위한 Compose 설정": "- **Feature**: Build Cache Optimization를 위한 Compose Settings",
  "- **효과**: Build 컨텍스트 크기 50% 이상 축소": "- **Effect**: Build 컨텍스트 Size 50% 이상 축소",
  "- **기능**: Optimization된 Docker 컨텍스트 제외 설정": "- **Feature**: Optimization된 Docker 컨텍스트 제외 Settings",
  "- **특징**: 4단계 멀티스테이지, Security 강화, Performance Optimization": "- **특징**: 4Step 멀티스테이지, Security 강화, Performance Optimization",
  "- **기능**: 프로덕션 Optimization된 메인 Dockerfile": "- **Feature**: Production Optimization된 메인 Dockerfile",
  "📁 Create된 Optimization File들": "📁 Create된 Optimization File들",
  "# 📁 Create된 Optimization File들": "# 📁 Create된 Optimization File들",
  "## 📁 Create된 Optimization 파일들": "# # 📁 Create된 Optimization File들",
  "멀티Platform Build": "멀티Platform Build",
  "# 멀티Platform Build": "# 멀티Platform Build",
  "## 멀티Platform Build": "# # 멀티Platform Build",
  "### 멀티플랫폼 Build": "# # # 멀티Platform Build",
  "Cache 레이어별 Build": "Cache 레이어별 Build",
  "# Cache 레이어별 Build": "# Cache 레이어별 Build",
  "Docker Compose 사용": "Docker Compose 사용",
  "# Docker Compose 사용": "# Docker Compose 사용",
  "또는 Build Script 사용": "또는 Build Script 사용",
  "# 또는 Build 스크립트 사용": "# 또는 Build Script 사용",
  "Optimization된 Dockerfile 사용": "Optimization된 Dockerfile 사용",
  "# Optimization된 Dockerfile 사용": "# Optimization된 Dockerfile 사용",
  "### 기본 Build": "# ## Default Build",
  "🚀 사용 방법": "🚀 사용 방법",
  "# 🚀 사용 방법": "# 🚀 사용 방법",
  "# # 🚀 사용 방법": "# # 🚀 사용 방법",
  "✅ 헬스체크 강화": "✅ 헬스체크 강화",
  "# ✅ 헬스체크 강화": "# ✅ 헬스체크 강화",
  "## ✅ 헬스체크 강화": "# # ✅ 헬스체크 강화",
  "### ✅ 헬스체크 강화": "# # # ✅ 헬스체크 강화",
  "# ### ✅ 헬스체크 강화": "# # # # ✅ 헬스체크 강화",
  "- **프로세스 관리**: 백엔드/Frontend 프로세스 Optimization": "- **프로세스 Management**: Backend/Frontend 프로세스 Optimization",
  "- **Nginx 캐싱**: 정적 자원 브라우저 캐싱": "- **Nginx Caching**: 정적 Resource 브라우저 Caching",
  "- **Gzip 압축**: 정적 자원 압축 전송": "- **Gzip 압축**: 정적 Resource 압축 Send",
  "- **dumb-init**: 올바른 시그널 처리": "- **dumb-init**: 올바른 Hour그널 Process",
  "- **비특권 포트**: 8080 포트 사용 (80 대신)": "- **비특권 Port**: 8080 Port 사용 (80 대신)",
  "- **권한 최소화**: 필요한 최소 권한만 부여": "- **Permission Minimum화**: 필요한 Minimum Permission만 부여",
  "- **Security 헤더**: Nginx Security 헤더 설정": "- **Security 헤더**: Nginx Security 헤더 Settings",
  "- **Non-root 사용자**: UID 1001 `musashi` 사용자로 실행": "- **Non-root User**: UID 1001 `musashi` User로 Execute",
  "✅ Security 강화": "✅ Security 강화",
  "# ✅ Security 강화": "# ✅ Security 강화",
  "## ✅ Security 강화": "# # ✅ Security 강화",
  "### ✅ Security 강화": "# # # ✅ Security 강화",
  "#### ✅ Security 강화": "# # # # ✅ Security 강화",
  "- **Performance**: 빠른 컨테이너 Start 시간": "- **Performance**: 빠른 Container Start Time",
  "- **Security성**: 최소 패키지 설치로 공격면 축소": "- **Security성**: Minimum 패Key지 설치로 공격면 축소",
  "- **경량화**: Alpine Linux 기반으로 이미지 크기 최소화": "- **경량화**: Alpine Linux 기반으로 Image Size Minimum화",
  "✅ Alpine Linux 베이스 Image": "✅ Alpine Linux 베이스 Image",
  "# ✅ Alpine Linux 베이스 Image": "# ✅ Alpine Linux 베이스 Image",
  "## ✅ Alpine Linux 베이스 Image": "# # ✅ Alpine Linux 베이스 Image",
  "### ✅ Alpine Linux 베이스 Image": "# # # ✅ Alpine Linux 베이스 Image",
  "# ### ✅ Alpine Linux 베이스 이미지": "# # # # ✅ Alpine Linux 베이스 Image",
  "**runtime**: 최종 Production 런타임 레이어": "**runtime**: 최종 Production 런타임 레이어",
  "4. **runtime**: 최종 Production 런타임 레이어": "4. **runtime**: 최종 Production 런타임 레이어",
  "**python-deps**: Python Dependencies Cache 레이어": "**python-deps**: Python Dependencies Cache 레이어",
  "3. **python-deps**: Python 의존성 Cache 레이어": "3. **python-deps**: Python Dependencies Cache 레이어",
  "**frontend-builder**: Frontend Build 레이어  ": "**frontend-builder**: Frontend Build 레이어  ",
  "2. **frontend-builder**: Frontend Build 레이어  ": "2. **frontend-builder**: Frontend Build 레이어  ",
  "**frontend-deps**: Node.js dependencies Cache 레이어": "**frontend-deps**: Node.js dependencies Cache 레이어",
  "1. **frontend-deps**: Node.js dependencies Cache 레이어": "1. **frontend-deps**: Node.js dependencies Cache 레이어",
  "✅ 멀티스테이지 Build (4Step)": "✅ 멀티스테이지 Build (4Step)",
  "# ✅ 멀티스테이지 Build (4Step)": "# ✅ 멀티스테이지 Build (4Step)",
  "## ✅ 멀티스테이지 Build (4Step)": "# # ✅ 멀티스테이지 Build (4Step)",
  "### ✅ 멀티스테이지 Build (4Step)": "# # # ✅ 멀티스테이지 Build (4Step)",
  "#### ✅ 멀티스테이지 Build (4단계)": "# # # # ✅ 멀티스테이지 Build (4Step)",
  "🎯 구현된 Optimization Feature": "🎯 구현된 Optimization Feature",
  "# 🎯 구현된 Optimization Feature": "# 🎯 구현된 Optimization Feature",
  "## 🎯 구현된 Optimization Feature": "# # 🎯 구현된 Optimization Feature",
  "### 🎯 구현된 Optimization 기능": "# # # 🎯 구현된 Optimization Feature",
  "- **Cache 레이어**: 효율적인 Build 시간 단축": "- **Cache 레이어**: Efficiency적인 Build Time 단축",
  "- **Optimization 이미지**: `musashi:test` - 429MB (Python deps 포함)": "- **Optimization Image**: `musashi:test` - 429MB (Python deps 포함)",
  "- **기존 이미지**: `musashi:latest` - 365MB": "- **기존 Image**: `musashi:latest` - 365MB",
  "### 이미지 크기 Optimization": "# ## Image Size Optimization",
  "## 📊 Optimization 성과 요약": "# # 📊 Optimization Performance Summary",
  "🐳 Docker Production Optimization 보고서": "🐳 Docker Production Optimization 보고서",
  "# 🐳 Docker 프로덕션 Optimization 보고서": "# 🐳 Docker Production Optimization 보고서",
  "**관리자**: Musashi Development Team": "**Management자**: Musashi Development Team",
  "**마지막 Update**: 2024-08-03  ": "**마지막 Update**: 2024-08-03  ",
  "**베스트 프랙티스 발견 Hour** → Example Code Update": "**베스트 프랙티스 발견 Hour** → Example Code Update",
  "3. **베스트 프랙티스 발견 시** → Example 코드 Update": "3. **베스트 프랙티스 발견 Hour** → Example Code Update",
  "**Component 개선 Hour** → Change된 API Documentation화": "**Component 개선 Hour** → Change된 API Documentation화",
  "2. **컴포넌트 개선 시** → 변경된 API Documentation화": "2. **Component 개선 Hour** → Change된 API Documentation화",
  "**새 Component Add Hour** → 이 Documentation에 Usage Add": "**새 Component Add Hour** → 이 Documentation에 Usage Add",
  "1. **새 컴포넌트 Add 시** → 이 Documentation에 사용법 Add": "1. **새 Component Add Hour** → 이 Documentation에 Usage Add",
  "이 Guide라인은 프로젝트가 성장함에 따라 지속적으로 Update됩니다:": "이 Guide라인은 Project가 성장함에 따라 지속적으로 Update됩니다:",
  "🔄 지속적인 개선": "🔄 지속적인 개선",
  "# 🔄 지속적인 개선": "# 🔄 지속적인 개선",
  "# # 🔄 지속적인 개선": "# # 🔄 지속적인 개선",
  "{/* 더 많은 카드들... */}": "{/* 더 많은 카드들... */}",
  "              자세히 View": "              자세히 View",
  "드래그 앤 드롭으로 쉽게 워크플로우를 만드세요": "드래그 앤 드롭으로 쉽게 워크플로우를 만드세요",
  "시각적 디자인": "Hour각적 디자인",
  "<Badge variant=\"primary\" className=\"mb-4\">새로운</Badge>": "<Badge variant=\"primary\" className=\"mb-4\">새로운</Badge>",
  "주요 기능": "주요 Feature",
  "\"Start하기\",": "\"Start하기\",",
  "          text: \"Start하기\",": "          text: \"Start하기\",",
  "description=\"Musashi와 함께 워크플로우를 디자인하세요\"": "description=\"Musashi와 함께 워크플로우를 디자인하세요\"",
  "title=\"환영합니다\"": "title=\"환영합니다\"",
  "📖 Example: 올바른 페이지 Configuration": "📖 Example: 올바른 페이지 Configuration",
  "# 📖 Example: 올바른 페이지 Configuration": "# 📖 Example: 올바른 페이지 Configuration",
  "## 📖 Example: 올바른 페이지 구성": "# # 📖 Example: 올바른 페이지 Configuration",
  "// ✅ 권장": "// ✅ 권장",
  "// ❌ 금지": "// ❌ 금지",
  "**하드코딩된 Value 사용 금지**": "**하드코딩된 Value 사용 금지**",
  "3. **하드코딩된 값 사용 금지**": "3. **하드코딩된 Value 사용 금지**",
  "<Button>버튼</Button>": "<Button>버튼</Button>",
  "<Typography variant=\"h1\">제목</Typography>": "<Typography variant=\"h1\">Title</Typography>",
  "<button>버튼</button>": "<button>버튼</button>",
  "<h1>제목</h1>": "<h1>Title</h1>",
  "**HTML Tag 직접 사용 금지**": "**HTML Tag 직접 사용 금지**",
  "2. **HTML 태그 직접 사용 금지**": "2. **HTML Tag 직접 사용 금지**",
  "**직접 스타Day링 금지**": "**직접 스타Day링 금지**",
  "1. **직접 스타일링 금지**": "1. **직접 스타Day링 금지**",
  "🚫 금지사항": "🚫 금지사항",
  "# 🚫 금지사항": "# 🚫 금지사항",
  "# # 🚫 금지사항": "# # 🚫 금지사항",
  "- [ ] Components 페이지에 데모 Add": "- [ ] Components 페이지에 데모 Add",
  "- [ ] index.ts에 export Add": "- [ ] index.ts에 export Add",
  "- [ ] 반응형 디자인 지원": "- [ ] 반응형 디자인 Support",
  "- [ ] Accessibility(a11y) 고려": "- [ ] Accessibility(a11y) 고려",
  "- [ ] TypeScript 타입 정의": "- [ ] TypeScript Type 정의",
  "- [ ] 테마 시스템 통합": "- [ ] 테마 Hour스템 Integration",
  "- [ ] Reusability 고려한 props 설계": "- [ ] Reusability 고려한 props 설계",
  "**새 Component Create Hour 체크리스트**": "**새 Component Create Hour 체크리스트**",
  "# **새 Component Create Hour 체크리스트**": "# **새 Component Create Hour 체크리스트**",
  "## **새 Component Create Hour 체크리스트**": "# # **새 Component Create Hour 체크리스트**",
  "### **새 컴포넌트 Create 시 체크리스트**": "# # # **새 Component Create Hour 체크리스트**",
  "- [ ] 인라인 스타일 대신 컴포넌트 props 활용": "- [ ] 인라인 스타Day 대신 Component props 활용",
  "- [ ] 테마 시스템의 색상/간격 사용": "- [ ] 테마 Hour스템의 색상/Interval 사용",
  "- [ ] Card 컴포넌트로 콘텐츠 Group핑": "- [ ] Card Component로 콘텐츠 Group핑",
  "- [ ] Button 컴포넌트로 버튼 처리": "- [ ] Button Component로 버튼 Process",
  "- [ ] Typography 컴포넌트로 텍스트 처리": "- [ ] Typography Component로 텍스트 Process",
  "- [ ] 기존 컴포넌트로 구현 가능한지 Confirm": "- [ ] 기존 Component로 구현 가능한지 Confirm",
  "**Component 사용 전 체크리스트**": "**Component 사용 전 체크리스트**",
  "# **Component 사용 전 체크리스트**": "# **Component 사용 전 체크리스트**",
  "## **Component 사용 전 체크리스트**": "# # **Component 사용 전 체크리스트**",
  "# ## **컴포넌트 사용 전 체크리스트**": "# # # **Component 사용 전 체크리스트**",
  "   - Props 인터페이스 Description": "   - Props 인터페이스 Description",
  "   - 이 Documentation에 사용법 Add": "   - 이 Documentation에 Usage Add",
  "**Documentation화**": "**Documentation화**",
  "5. **Documentation화**": "5. **Documentation화**",
  "   - Components 페이지에 데모 Add": "   - Components 페이지에 데모 Add",
  "   - `/src/components/common/index.ts`에 export Add": "   - `/src/components/common/index.ts`에 export Add",
  "4. **등록**": "4. **Registration**",
  "   - Accessibility 고려": "   - Accessibility 고려",
  "- TypeScript 타입 정의": "- TypeScript Type 정의",
  "- 테마 시스템 사용": "- 테마 Hour스템 사용",
  "**구현**": "**구현**",
  "3. **구현**": "3. **구현**",
  "**Component 설계**": "**Component 설계**",
  "2. **컴포넌트 설계**": "2. **Component 설계**",
  "   - 어떤 Variants(variant)이 필요한가?": "   - 어떤 Variants(variant)이 필요한가?",
  "- 어떤 props가 필요한가?": "- 어떤 props가 필요한가?",
  "- 어떤 기존 컴포넌트와 유사한가?": "- 어떤 기존 Component와 유사한가?",
  "1. **요구사항 분석**": "1. **Requirement Analysis**",
  "**새 Component Create 절차**": "**새 Component Create 절차**",
  "# **새 Component Create 절차**": "# **새 Component Create 절차**",
  "## **새 Component Create 절차**": "# # **새 Component Create 절차**",
  "### **새 컴포넌트 Create 절차**": "# # # **새 Component Create 절차**",
  "**Accessibility(a11y) Requirement이 특수한 경우**": "**Accessibility(a11y) Requirement이 특수한 경우**",
  "4. **Accessibility(a11y) 요구사항이 특수한 경우**": "4. **Accessibility(a11y) Requirement이 특수한 경우**",
  "**복잡한 로직이나 Status Management 필요**": "**복잡한 로직이나 Status Management 필요**",
  "3. **복잡한 로직이나 상태 관리 필요**": "3. **복잡한 로직이나 Status Management 필요**",
  "**재사용 Frequency가 3회 이상 예상**": "**재사용 Frequency가 3회 이상 예상**",
  "2. **재사용 빈도가 3회 이상 예상**": "2. **재사용 Frequency가 3회 이상 예상**",
  "**기존 Component 조합으로 Resolve 불가능**": "**기존 Component 조합으로 Resolve 불가능**",
  "1. **기존 컴포넌트 조합으로 해결 불가능**": "1. **기존 Component 조합으로 Resolve 불가능**",
  "**언제 새 Component를 만들 것인가?**": "**언제 새 Component를 만들 것인가?**",
  "# **언제 새 Component를 만들 것인가?**": "# **언제 새 Component를 만들 것인가?**",
  "## **언제 새 Component를 만들 것인가?**": "# # **언제 새 Component를 만들 것인가?**",
  "# ## **언제 새 컴포넌트를 만들 것인가?**": "# # # **언제 새 Component를 만들 것인가?**",
  "🔧 새 Component Create Guide": "🔧 새 Component Create Guide",
  "# 🔧 새 Component Create Guide": "# 🔧 새 Component Create Guide",
  "## 🔧 새 컴포넌트 Create Guide": "# # 🔧 새 Component Create Guide",
  "// ❌ 잘못된 사용": "// ❌ 잘못된 사용",
  "// ✅ 올바른 사용": "// ✅ 올바른 사용",
  "**타이포그래피 사용**": "**타이포그래피 사용**",
  "# **타이포그래피 사용**": "# **타이포그래피 사용**",
  "## **타이포그래피 사용**": "# # **타이포그래피 사용**",
  "# ## **타이포그래피 사용**": "# # # **타이포그래피 사용**",
  "**Interval 사용**": "**Interval 사용**",
  "# **Interval 사용**": "# **Interval 사용**",
  "## **Interval 사용**": "# # **Interval 사용**",
  "# ## **간격 사용**": "# # # **Interval 사용**",
  "**색상 사용**": "**색상 사용**",
  "# **색상 사용**": "# **색상 사용**",
  "## **색상 사용**": "# # **색상 사용**",
  "# ## **색상 사용**": "# # # **색상 사용**",
  "🎨 테마 Hour스템 사용": "🎨 테마 Hour스템 사용",
  "# 🎨 테마 Hour스템 사용": "# 🎨 테마 Hour스템 사용",
  "# # 🎨 테마 시스템 사용": "# # 🎨 테마 Hour스템 사용",
  "<h1 className=\"text-4xl font-bold text-white\">제목</h1>": "<h1 className=\"text-4xl font-bold text-white\">Title</h1>",
  "features={[\"기능1\", \"기능2\", \"기능3\"]}": "features={[\"Feature1\", \"Feature2\", \"Feature3\"]}",
  "    text: \"Start하기\",": "    text: \"Start하기\",",
  "  description=\"Description 텍스트\"": "  description=\"Description 텍스트\"",
  "title=\"메인 제목\"": "title=\"메인 Title\"",
  "# ### **Hero 컴포넌트**": "# ### **Hero Component**",
  "# ### **Footer 컴포넌트**": "# ### **Footer Component**",
  "# ### **Navbar 컴포넌트**": "# ### **Navbar Component**",
  "레이아웃 Component": "레이아웃 Component",
  "# 레이아웃 Component": "# 레이아웃 Component",
  "## 레이아웃 Component": "# # 레이아웃 Component",
  "# ## 레이아웃 컴포넌트": "# # # 레이아웃 Component",
  "// ❌ 잘못된 사용 (직접 슬라이더 구현)": "// ❌ 잘못된 사용 (직접 슬라이더 구현)",
  "# ### **Carousel 컴포넌트**": "# ### **Carousel Component**",
  "<span className=\"bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs\">완료</span>": "<span className=\"bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs\">Complete</span>",
  "<Badge variant=\"success\">완료</Badge>": "<Badge variant=\"success\">Complete</Badge>",
  "# ### **Badge 컴포넌트**": "# ### **Badge Component**",
  "placeholder=\"이메일을 입력하세요\"": "placeholder=\"이메Day을 Input하세요\"",
  "label=\"이메일\"": "label=\"이메Day\"",
  "# ### **Input 컴포넌트**": "# ### **Input Component**",
  "<div className=\"bg-white shadow rounded p-4\">내용</div>": "<div className=\"bg-white shadow rounded p-4\">내용</div>",
  "<Typography variant=\"h4\">이미지 카드</Typography>": "<Typography variant=\"h4\">Image 카드</Typography>",
  "// ✅ 이미지가 있는 카드": "// ✅ Image가 있는 카드",
  "<Typography variant=\"body\" color=\"light\">내용</Typography>": "<Typography variant=\"body\" color=\"light\">내용</Typography>",
  "<Typography variant=\"h4\">카드 제목</Typography>": "<Typography variant=\"h4\">카드 Title</Typography>",
  "# ### **Card 컴포넌트**": "# ### **Card Component**",
  "<button className=\"bg-blue-500 text-white px-4 py-2\">버튼</button>": "<button className=\"bg-blue-500 text-white px-4 py-2\">버튼</button>",
  "<Button variant=\"secondary\" disabled>비활성 버튼</Button>": "<Button variant=\"secondary\" disabled>비활성 버튼</Button>",
  "<Button variant=\"primary\" size=\"large\">주요 액션</Button>": "<Button variant=\"primary\" size=\"large\">주요 액션</Button>",
  "# ### **Button 컴포넌트**": "# ### **Button Component**",
  "<p className=\"text-gray-500\">Description 텍스트</p>": "<p className=\"text-gray-500\">Description 텍스트</p>",
  "<h1 style={{fontSize: '32px'}}>제목</h1>": "<h1 style={{fontSize: '32px'}}>Title</h1>",
  "<Typography variant=\"body\" color=\"light\">Description 텍스트</Typography>": "<Typography variant=\"body\" color=\"light\">Description 텍스트</Typography>",
  "# ### **Typography 컴포넌트**": "# ### **Typography Component**",
  "# ## 기본 컴포넌트 (`/src/components/common/`)": "# ## Default Component (`/src/components/common/`)",
  "📚 사용 가능한 Component": "📚 사용 가능한 Component",
  "# 📚 사용 가능한 Component": "# 📚 사용 가능한 Component",
  "# # 📚 사용 가능한 컴포넌트": "# # 📚 사용 가능한 Component",
  "- props를 통한 유연한 커스터마이징 지원": "- props를 통한 유연한 커스터마이징 Support",
  "- 새 컴포넌트는 재사용 가능하도록 설계": "- 새 Component는 재사용 가능하도록 설계",
  "- 기존 컴포넌트로 해결되지 않는 경우에만 새 컴포넌트 Create": "- 기존 Component로 Resolve되지 않는 경우에만 새 Component Create",
  "**Scalability 고려**": "**Scalability 고려**",
  "3. **Scalability 고려**": "3. **Scalability 고려**",
  "# 3. **Scalability 고려**": "# 3. **Scalability 고려**",
  "## 3. **Scalability 고려**": "# # 3. **Scalability 고려**",
  "# ## 3. **확장성 고려**": "# # # 3. **Scalability 고려**",
  "- 브랜드 아이덴티티 유지": "- 브랜드 아이덴티티 유지",
  "- 일관된 사용자 경험을 위해 컴포넌트 Variants(variant) 활용": "- Day관된 User 경험을 위해 Component Variants(variant) 활용",
  "- 모든 색상, 간격, 타이포그래피는 `theme.ts`에서 정의된 값 사용": "- 모든 색상, Interval, 타이포그래피는 `theme.ts`에서 정의된 Value 사용",
  "**디자인 Hour스템 준수**": "**디자인 Hour스템 준수**",
  "2. **디자인 Hour스템 준수**": "2. **디자인 Hour스템 준수**",
  "# 2. **디자인 Hour스템 준수**": "# 2. **디자인 Hour스템 준수**",
  "## 2. **디자인 Hour스템 준수**": "# # 2. **디자인 Hour스템 준수**",
  "# ## 2. **디자인 시스템 준수**": "# # # 2. **디자인 Hour스템 준수**",
  "- HTML 태그나 인라인 스타일 대신 디자인 시스템 컴포넌트 사용": "- HTML Tag나 인라인 스타Day 대신 디자인 Hour스템 Component 사용",
  "- 커스텀 스타일링 대신 기존 컴포넌트의 props 활용": "- 커스텀 스타Day링 대신 기존 Component의 props 활용",
  "- 새로운 UI가 필요할 때는 **반드시** 기존 컴포넌트를 먼저 검토": "- 새로운 UI가 필요할 때는 **반드Hour** 기존 Component를 먼저 Review",
  "**기존 Component 우선 사용 (Component First)**": "**기존 Component 우선 사용 (Component First)**",
  "1. **기존 Component 우선 사용 (Component First)**": "1. **기존 Component 우선 사용 (Component First)**",
  "# 1. **기존 Component 우선 사용 (Component First)**": "# 1. **기존 Component 우선 사용 (Component First)**",
  "## 1. **기존 Component 우선 사용 (Component First)**": "# # 1. **기존 Component 우선 사용 (Component First)**",
  "# ## 1. **기존 컴포넌트 우선 사용 (Component First)**": "# # # 1. **기존 Component 우선 사용 (Component First)**",
  "프로젝트의 Consistency과 유지보수성을 위한 Component Usage Guidelines입니다.": "Project의 Consistency과 Maintenance성을 위한 Component Usage Guidelines입니다.",
  "GitHub Actions Check logs: Actions 탭에서 상세 Check logs": "GitHub Actions Check logs: Actions 탭에서 상세 Check logs",
  "4. GitHub Actions Check logs: Actions 탭에서 상세 Check logs": "4. GitHub Actions Check logs: Actions 탭에서 상세 Check logs",
  "Dependencies 재설치: `npm ci` (frontend), `pip install -r requirements.txt` (backend)": "Dependencies 재설치: `npm ci` (frontend), `pip install -r requirements.txt` (backend)",
  "3. 의존성 재설치: `npm ci` (frontend), `pip install -r requirements.txt` (backend)": "3. Dependencies 재설치: `npm ci` (frontend), `pip install -r requirements.txt` (backend)",
  "Docker 정리: `docker system prune -a`": "Docker 정리: `docker system prune -a`",
  "2. Docker 정리: `docker system prune -a`": "2. Docker 정리: `docker system prune -a`",
  "Cache 정리: `rm -rf frontend/node_modules backend/venv`": "Cache 정리: `rm -rf frontend/node_modules backend/venv`",
  "1. Cache 정리: `rm -rf frontend/node_modules backend/venv`": "1. Cache 정리: `rm -rf frontend/node_modules backend/venv`",
  "문제가 지속되면:": "Problem가 지속되면:",
  "# # 🆘 문제 해결": "# # 🆘 Problem Resolve",
  "- 병렬 실행: 백엔드와 Frontend Testing를 별도 터미널에서 실행": "- 병렬 Execute: Backend와 Frontend Testing를 별도 터미널에서 Execute",
  "- `ci-validate.sh full`: 완전한 검증 (약 3-5분)": "- `ci-validate.sh full`: 완전한 Validation (약 3-5Minute)",
  "- `ci-validate.sh quick`: 빠른 검증 (약 1-2분)": "- `ci-validate.sh quick`: 빠른 Validation (약 1-2Minute)",
  "- Testing 후 자동으로 정리되지만, 수동 정리가 필요할 수 있음:": "- Testing 후 Auto으로 정리되지만, Manual 정리가 필요할 수 있음:",
  "- Testing 중 포트 27017, 27018이 사용됨 (MongoDB)": "- Testing 중 Port 27017, 27018이 사용됨 (MongoDB)",
  "- Python 3.12와 Node.js 18이 설치되어 있어야 함": "- Python 3.12와 Node.js 18이 설치되어 있어야 함",
  "- 스크립트 실행 전 Docker가 실행 중인지 Confirm": "- Script Execute 전 Docker가 Execute 중인지 Confirm",
  "**Docker 격리**: Environment Problem 의심 Hour `ci-docker-test.sh` 사용": "**Docker 격리**: Environment Problem 의심 Hour `ci-docker-test.sh` 사용",
  "4. **Docker 격리**: 환경 문제 의심 시 `ci-docker-test.sh` 사용": "4. **Docker 격리**: Environment Problem 의심 Hour `ci-docker-test.sh` 사용",
  "**로컬 재현**: `ci-local-test.sh`로 정확한 CI Environment 재현": "**로컬 재현**: `ci-local-test.sh`로 정확한 CI Environment 재현",
  "3. **로컬 재현**: `ci-local-test.sh`로 정확한 CI 환경 재현": "3. **로컬 재현**: `ci-local-test.sh`로 정확한 CI Environment 재현",
  "**Failed Hour 디버깅**: `ci-debug.sh`로 Problem Cause 파악": "**Failed Hour 디버깅**: `ci-debug.sh`로 Problem Cause 파악",
  "2. **Failed 시 디버깅**: `ci-debug.sh`로 문제 원인 파악": "2. **Failed Hour 디버깅**: `ci-debug.sh`로 Problem Cause 파악",
  "**Commit 전 Validation**: 항상 `ci-validate.sh`를 Execute하여 CI Passed Confirm": "**Commit 전 Validation**: 항상 `ci-validate.sh`를 Execute하여 CI Passed Confirm",
  "1. **커밋 전 검증**: 항상 `ci-validate.sh`를 실행하여 CI Passed Confirm": "1. **Commit 전 Validation**: 항상 `ci-validate.sh`를 Execute하여 CI Passed Confirm",
  "💡 모범 사례": "💡 모범 사례",
  "# 💡 모범 사례": "# 💡 모범 사례",
  "# # 💡 모범 사례": "# # 💡 모범 사례",
  "H -->|아니오| I[ci-docker-test.sh]": "H -->|아니오| I[ci-docker-test.sh]",
  "    E --> F[문제 Modify]": "    E --> F[Problem Modify]",
  "C -->|아니오| E[ci-debug.sh]": "C -->|아니오| E[ci-debug.sh]",
  "C -->|예| D[Git Push]": "C -->|예| D[Git Push]",
  "    B --> C{검증 Passed?}": "    B --> C{Validation Passed?}",
  "A[코드 변경] --> B[ci-validate.sh]": "A[Code Change] --> B[ci-validate.sh]",
  "📊 CI 워크플로우": "📊 CI 워크플로우",
  "# 📊 CI 워크플로우": "# 📊 CI 워크플로우",
  "# # 📊 CI 워크플로우": "# # 📊 CI 워크플로우",
  "**문제**: Testing DB Connect Failed": "**Problem**: Testing DB Connect Failed",
  "상세 디버깅": "상세 디버깅",
  "# 상세 디버깅": "# 상세 디버깅",
  "로컬에서 재현": "로컬에서 재현",
  "# 로컬에서 재현": "# 로컬에서 재현",
  "**문제**: 유닛 Testing 또는 통합 Testing Failed": "**Problem**: 유닛 Testing 또는 Integration Testing Failed",
  "Manual으로 Confirm": "Manual으로 Confirm",
  "# 수동으로 Confirm": "# Manual으로 Confirm",
  "# 자동 Modify": "# Auto Modify",
  "**문제**: Ruff 린팅 Rules 위반": "**Problem**: Ruff 린팅 Rules 위반",
  "Python 린팅 Error": "Python 린팅 Error",
  "# Python 린팅 Error": "# Python 린팅 Error",
  "## Python 린팅 Error": "# # Python 린팅 Error",
  "### Python 린팅 Error": "# # # Python 린팅 Error",
  "Auto Modify Hour도": "Auto Modify Hour도",
  "# 자동 Modify 시도": "# Auto Modify Hour도",
  "**문제**: 사용하지 않는 변수, 타입 불일치": "**Problem**: 사용하지 않는 Variables, Type 불Day치",
  "TypeScript Error (TS6133, TS2345 등)": "TypeScript Error (TS6133, TS2345 등)",
  "# TypeScript Error (TS6133, TS2345 등)": "# TypeScript Error (TS6133, TS2345 등)",
  "## TypeScript Error (TS6133, TS2345 등)": "# # TypeScript Error (TS6133, TS2345 등)",
  "### TypeScript Error (TS6133, TS2345 등)": "# # # TypeScript Error (TS6133, TS2345 등)",
  "🔧 Day반적인 CI Problem Resolve": "🔧 Day반적인 CI Problem Resolve",
  "# 🔧 Day반적인 CI Problem Resolve": "# 🔧 Day반적인 CI Problem Resolve",
  "# # 🔧 일반적인 CI 문제 해결": "# # 🔧 Day반적인 CI Problem Resolve",
  "- ✅ 번들 크기": "- ✅ 번들 Size",
  "- ✅ Testing 커버리지": "- ✅ Testing 커버리지",
  "- ✅ 코드 품질 검사": "- ✅ Code Quality Inspection",
  "- ✅ 유닛 Testing": "- ✅ 유닛 Testing",
  "- ✅ Python 린팅 (Ruff)": "- ✅ Python 린팅 (Ruff)",
  "- ✅ TypeScript 컴파일": "- ✅ TypeScript 컴File",
  "**검증 항목**:": "**Validation Item**:",
  "빠른 Validation (Default Testing만)": "빠른 Validation (Default Testing만)",
  "# 빠른 검증 (기본 Testing만)": "# 빠른 Validation (Default Testing만)",
  "전체 Validation (권장)": "전체 Validation (권장)",
  "# 전체 검증 (권장)": "# 전체 Validation (권장)",
  "**목적**: Git push 전 CI Passed 여부 사전 검증": "**Purpose**: Git push 전 CI Passed 여부 사전 Validation",
  "- 일반적인 문제 패턴 감지": "- Day반적인 Problem Pattern 감지",
  "- 자동 Modify 제안": "- Auto Modify 제안",
  "- 상세한 Error 분석": "- 상세한 Error Analysis",
  "**제공 기능**:": "**제공 Feature**:",
  "Testing Failed만 Check": "Testing Failed만 Check",
  "# Testing Failed만 점검": "# Testing Failed만 Check",
  "Python 린팅만 Check": "Python 린팅만 Check",
  "# Python 린팅만 점검": "# Python 린팅만 Check",
  "TypeScript Error만 Check": "TypeScript Error만 Check",
  "# TypeScript Error만 점검": "# TypeScript Error만 Check",
  "모든 Problem Check": "모든 Problem Check",
  "# 모든 문제 점검": "# 모든 Problem Check",
  "**목적**: CI Failed 원인 분석 및 자동 Modify 제안": "**Purpose**: CI Failed Cause Analysis 및 Auto Modify 제안",
  "- 네트워크 격리된 환경": "- Network 격리된 Environment",
  "- 모든 의존성 자동 설치": "- 모든 Dependencies Auto 설치",
  "- Ubuntu 22.04 환경 (GitHub Actions와 동일)": "- Ubuntu 22.04 Environment (GitHub Actions와 동Day)",
  "**특징**:": "**특징**:",
  "CI와 완전히 동Day한 Ubuntu Environment에서 Testing": "CI와 완전히 동Day한 Ubuntu Environment에서 Testing",
  "# CI와 완전히 동일한 Ubuntu 환경에서 Testing": "# CI와 완전히 동Day한 Ubuntu Environment에서 Testing",
  "**목적**: Docker 컨테이너 내에서 정확한 CI 환경 재현": "**Purpose**: Docker Container 내에서 정확한 CI Environment 재현",
  "- MongoDB (자동으로 Docker 컨테이너로 실행됨)": "- MongoDB (Auto으로 Docker Container로 Execute됨)",
  "**필요 환경**:": "**필요 Environment**:",
  "Docker Build만 Testing": "Docker Build만 Testing",
  "# Docker Build만 Testing": "# Docker Build만 Testing",
  "Frontend만 Testing": "Frontend만 Testing",
  "# Frontend만 Testing": "# Frontend만 Testing",
  "Backend만 Testing": "Backend만 Testing",
  "# 백엔드만 Testing": "# Backend만 Testing",
  "전체 CI 파이프라인 Execute": "전체 CI 파이프라인 Execute",
  "# 전체 CI 파이프라인 실행": "# 전체 CI 파이프라인 Execute",
  "**목적**: GitHub Actions와 동일한 Testing를 로컬에서 실행": "**Purpose**: GitHub Actions와 동Day한 Testing를 로컬에서 Execute",
  "📋 제공되는 Script": "📋 제공되는 Script",
  "# 📋 제공되는 Script": "# 📋 제공되는 Script",
  "# # 📋 제공되는 스크립트": "# # 📋 제공되는 Script",
  "GitHub Actions CI 파이프라인과 동일한 환경을 로컬에서 재현하고 디버깅할 수 있는 도구 모음입니다.": "GitHub Actions CI 파이프라인과 동Day한 Environment을 로컬에서 재현하고 디버깅할 수 있는 Tool 모음입니다.",
  "# # 🚀 개요": "# # 🚀 Overview",
  "CI 디버깅 Guide": "CI 디버깅 Guide",
  "# CI 디버깅 Guide": "# CI 디버깅 Guide",
  "모든 주요 개선사항이 `--fix` 플래그에 따라 자동 Apply되었으며, 프로젝트는 이제 더욱 전문적이고 유지보수 가능한 상태입니다.": "모든 주요 개선사항이 `--fix` 플래그에 따라 Auto Apply되었으며, Project는 이제 더욱 전문적이고 Maintenance 가능한 Status입니다.",
  "- **유지보수성** 향상 (일관된 코드 스타일)": "- **Maintenance성** 향상 (Day관된 Code 스타Day)",
  "- **Development 경험** 대폭 개선 (린팅, 포맷팅 통일)": "- **Development 경험** 대폭 개선 (린팅, 포맷팅 통Day)",
  "- **프로덕션 준비** 상태 달성 (debug 코드 Remove)": "- **Production 준비** Status 달성 (debug Code Remove)",
  "- **49개 파일** Modify으로 전체 코드베이스 품질 향상": "- **49개 File** Modify으로 전체 Code베이스 Quality 향상",
  "**Success적인 코드 개선 완료!**": "**Success적인 Code 개선 Complete!**",
  "✨ 결론": "✨ 결론",
  "# ✨ 결론": "# ✨ 결론",
  "# # ✨ 결론": "# # ✨ 결론",
  "- 필요시 strict 모드 완전 대응 가능": "- 필요Hour strict 모드 완전 대응 가능",
  "- 일부 복잡한 타입 에러는 프로덕션에 영향 없는 수준으로 유지": "- Day부 복잡한 Type 에러는 Production에 Impact 없는 수준으로 유지",
  "TypeScript 완전성": "TypeScript 완전성",
  "# TypeScript 완전성": "# TypeScript 완전성",
  "## TypeScript 완전성": "# # TypeScript 완전성",
  "# ## TypeScript 완전성": "# # # TypeScript 완전성",
  "**SEO**: 메타Tag Optimization": "**SEO**: 메타Tag Optimization",
  "4. **SEO**: 메타태그 Optimization": "4. **SEO**: 메타Tag Optimization",
  "**Accessibility**: ARIA Properties 완성": "**Accessibility**: ARIA Properties 완성",
  "3. **Accessibility**: ARIA Properties 완성": "3. **Accessibility**: ARIA Properties 완성",
  "2. **Performance Optimization**: React.memo, useMemo Apply 검토": "2. **Performance Optimization**: React.memo, useMemo Apply Review",
  "**E2E Testing**: Playwright Testing 확장": "**E2E Testing**: Playwright Testing 확장",
  "1. **E2E Testing**: Playwright Testing 확장": "1. **E2E Testing**: Playwright Testing 확장",
  "Add 개선 권장사항": "Add 개선 권장사항",
  "# Add 개선 권장사항": "# Add 개선 권장사항",
  "## Add 개선 권장사항": "# # Add 개선 권장사항",
  "### Add 개선 권장사항": "# # # Add 개선 권장사항",
  "🚨 남은 과제 (Select사항)": "🚨 남은 과제 (Select사항)",
  "# 🚨 남은 과제 (Select사항)": "# 🚨 남은 과제 (Select사항)",
  "## 🚨 남은 과제 (Select사항)": "# # 🚨 남은 과제 (Select사항)",
  "tsc --noEmit  # 타입 체크": "tsc --noEmit  # Type 체크",
  "🔧 Apply된 Tool 및 Settings": "🔧 Apply된 Tool 및 Settings",
  "# 🔧 Apply된 Tool 및 Settings": "# 🔧 Apply된 Tool 및 Settings",
  "## 🔧 Apply된 도구 및 설정": "# # 🔧 Apply된 Tool 및 Settings",
  "- ✅ **Performance**: 불필요한 console 출력 Remove": "- ✅ **Performance**: 불필요한 console Output Remove",
  "- ✅ **타입 안정성**: 런타임 에러 위험 감소": "- ✅ **Type Stability**: 런타임 에러 위험 감소",
  "- ✅ **프로덕션 안정성**: debug 코드 완전 Remove": "- ✅ **Production Stability**: debug Code 완전 Remove",
  "# ## Production 품질": "# ## Production Quality",
  "- ✅ **유지보수성**: 표준화된 코드 스타일": "- ✅ **Maintenance성**: Standard화된 Code 스타Day",
  "- ✅ **Debug 효율성**: console.log 정리로 깔끔한 콘솔": "- ✅ **Debug Efficiency성**: console.log 정리로 깔끔한 콘솔",
  "- ✅ **코드 가독성**: 일관된 포맷팅으로 읽기 쉬워짐": "- ✅ **Code 가독성**: Day관된 포맷팅으로 읽기 쉬워짐",
  "- ✅ **Build 안정성**: TypeScript 컴파일 에러 대폭 감소": "- ✅ **Build Stability**: TypeScript 컴File 에러 대폭 감소",
  "Development 경험 개선": "Development 경험 개선",
  "# Development 경험 개선": "# Development 경험 개선",
  "## Development 경험 개선": "# # Development 경험 개선",
  "### Development 경험 개선": "# # # Development 경험 개선",
  "| 코드 포맷 Consistency | 부분적 | 완전 통일 | 100% |": "| Code 포맷 Consistency | 부Minute적 | 완전 통Day | 100% |",
  "| 린팅 에러 (Python) | 여러 개 | 0개 | 100% |": "| 린팅 에러 (Python) | 여러 개 | 0개 | 100% |",
  "| Console 문 | 20+ 개 | 0개 | 100% |": "| Console 문 | 20+ 개 | 0개 | 100% |",
  "| TypeScript 컴파일 에러 | 50+ 개 | 대폭 감소 | 90%+ |": "| TypeScript 컴File 에러 | 50+ 개 | 대폭 감소 | 90%+ |",
  "| 항목 | 개선 전 | 개선 후 | 개선률 |": "| Item | 개선 전 | 개선 후 | 개선률 |",
  "Code Quality 지표": "Code Quality 지표",
  "# Code Quality 지표": "# Code Quality 지표",
  "## Code Quality 지표": "# # Code Quality 지표",
  "# ## 코드 품질 지표": "# # # Code Quality 지표",
  "📈 개선 Effect": "📈 개선 Effect",
  "# 📈 개선 Effect": "# 📈 개선 Effect",
  "# # 📈 개선 효과": "# # 📈 개선 Effect",
  "- ✅ **파일 형식**: 모든 파일 끝에 newline Add": "- ✅ **File Format**: 모든 File 끝에 newline Add",
  "- ✅ **Import Sort**: 표준 Group화 Apply": "- ✅ **Import Sort**: Standard Group화 Apply",
  "린팅 및 포맷팅 통Day": "린팅 및 포맷팅 통Day",
  "4. 린팅 및 포맷팅 통Day": "4. 린팅 및 포맷팅 통Day",
  "# 4. 린팅 및 포맷팅 통Day": "# 4. 린팅 및 포맷팅 통Day",
  "## 4. 린팅 및 포맷팅 통Day": "# # 4. 린팅 및 포맷팅 통Day",
  "# ## 4. 린팅 및 포맷팅 통일": "# # # 4. 린팅 및 포맷팅 통Day",
  "Math.max(acc.maxX, node.position.x + (nodeWidth || 150)),  // Security한 DefaultValue": "Math.max(acc.maxX, node.position.x + (nodeWidth || 150)),  // Security한 DefaultValue",
  "maxX: Math.max(acc.maxX, node.position.x + (nodeWidth || 150)),  // 안전한 기본값": "maxX: Math.max(acc.maxX, node.position.x + (nodeWidth || 150)),  // Security한 DefaultValue",
  "Math.max(acc.maxX, node.position.x + nodeWidth),  // undefined 에러 가능": "Math.max(acc.maxX, node.position.x + nodeWidth),  // undefined 에러 가능",
  "maxX: Math.max(acc.maxX, node.position.x + nodeWidth),  // undefined 에러 가능": "maxX: Math.max(acc.maxX, node.position.x + nodeWidth),  // undefined 에러 가능",
  "**layoutEngine.ts 개선 Examples**:": "**layoutEngine.ts 개선 Examples**:",
  "- ✅ **에러 처리 개선**: null/undefined 체크 Add": "- ✅ **에러 Process 개선**: null/undefined 체크 Add",
  "- ✅ **불필요한 코드 Remove**: 사용하지 않는 변수, 함수 Remove": "- ✅ **불필요한 Code Remove**: 사용하지 않는 Variables, 함수 Remove",
  "- ✅ **네이밍 Consistency**: 컴포넌트 props와 Testing 일치": "- ✅ **네이밍 Consistency**: Component props와 Testing Day치",
  "- ✅ **타입 안정성**: TypeScript strict 모드 호환성 개선": "- ✅ **Type Stability**: TypeScript strict 모드 Compatibility 개선",
  "Code Quality 개선": "Code Quality 개선",
  "3. Code Quality 개선": "3. Code Quality 개선",
  "# 3. Code Quality 개선": "# 3. Code Quality 개선",
  "## 3. Code Quality 개선": "# # 3. Code Quality 개선",
  "# ## 3. 코드 품질 개선": "# # # 3. Code Quality 개선",
  "- `Typography.test.tsx`: align prop을 variant로, normal weight를 regular로 Modify": "- `Typography.test.tsx`: align prop을 variant로, normal weight를 regular로 Modify",
  "- `Card.test.tsx`: compact/normal padding을 small/medium/large로 Modify": "- `Card.test.tsx`: compact/normal padding을 small/medium/large로 Modify",
  "- `Button.test.tsx`: fullWidth, icon props를 loading, custom props로 변경": "- `Button.test.tsx`: fullWidth, icon props를 loading, custom props로 Change",
  "- `Badge.test.tsx`: 존재하지 않는 props (dot, pill, icon) Remove": "- `Badge.test.tsx`: 존재하지 않는 props (dot, pill, icon) Remove",
  "**Modify된 주요 Testing 파일들**:": "**Modify된 주요 Testing File들**:",
  "- ✅ **Testing 개선**: 컴포넌트 props와 일치하도록 Testing Modify": "- ✅ **Testing 개선**: Component props와 Day치하도록 Testing Modify",
  "- ✅ **Prettier 포맷팅**: 코드 스타일 통일": "- ✅ **Prettier 포맷팅**: Code 스타Day 통Day",
  "- ✅ **Import Optimization**: 사용하지 않는 React import Remove": "- ✅ **Import Optimization**: 사용하지 않는 React import Remove",
  "- ✅ **Console 문 Remove**: 모든 console.log/warn/error Remove": "- ✅ **Console 문 Remove**: 모든 console.log/warn/error Remove",
  "- ✅ **타입 에러 Modify**: Testing 파일의 잘못된 props Modify": "- ✅ **Type 에러 Modify**: Testing File의 잘못된 props Modify",
  "TypeScript/React Code 개선 (Frontend)": "TypeScript/React Code 개선 (Frontend)",
  "2. TypeScript/React Code 개선 (Frontend)": "2. TypeScript/React Code 개선 (Frontend)",
  "# 2. TypeScript/React Code 개선 (Frontend)": "# 2. TypeScript/React Code 개선 (Frontend)",
  "## 2. TypeScript/React Code 개선 (Frontend)": "# # 2. TypeScript/React Code 개선 (Frontend)",
  "# ## 2. TypeScript/React 코드 개선 (Frontend)": "# # # 2. TypeScript/React Code 개선 (Frontend)",
  "+ 깔끔한 로직으로 정리": "+ 깔끔한 로직으로 정리",
  "- print(f\"Invalid workflow_id: {workflow_id}\")          # Remove됨": "- print(f\"Invalid workflow_id: {workflow_id}\")          # Remove됨",
  "- print(f\"Creating workflow with owner_id: {owner_id}\")  # Remove됨": "- print(f\"Creating workflow with owner_id: {owner_id}\")  # Remove됨",
  "**개선된 파일들**:": "**개선된 File들**:",
  "- ✅ **파일 끝 newline Add**: 일관된 파일 형식": "- ✅ **File 끝 newline Add**: Day관된 File Format",
  "- ✅ **Print 문 Remove**: debug print 문들 완전 Remove": "- ✅ **Print 문 Remove**: debug print 문들 완전 Remove",
  "- ✅ **Ruff 린팅**: 모든 검사 Passed": "- ✅ **Ruff 린팅**: 모든 Inspection Passed",
  "- ✅ **Black 포맷팅**: 21개 파일 재포맷": "- ✅ **Black 포맷팅**: 21개 File 재포맷",
  "Python Code 개선 (Backend)": "Python Code 개선 (Backend)",
  "1. Python Code 개선 (Backend)": "1. Python Code 개선 (Backend)",
  "# 1. Python Code 개선 (Backend)": "# 1. Python Code 개선 (Backend)",
  "## 1. Python Code 개선 (Backend)": "# # 1. Python Code 개선 (Backend)",
  "# ## 1. Python 코드 개선 (Backend)": "# # # 1. Python Code 개선 (Backend)",
  "✅ Complete된 개선사항": "✅ Complete된 개선사항",
  "# ✅ Complete된 개선사항": "# ✅ Complete된 개선사항",
  "# # ✅ 완료된 개선사항": "# # ✅ Complete된 개선사항",
  "- **개선 유형**: lint/format 통일, Warning Remove, 작은 리팩터링": "- **개선 유형**: lint/format 통Day, Warning Remove, 작은 리팩터링",
  "- **작업 시간**: 완료": "- **Task Time**: Complete",
  "- **Modify된 파일**: 49개": "- **Modify된 File**: 49개",
  "- **대상 파일**: 66개 (Python + TypeScript/React)": "- **대상 File**: 66개 (Python + TypeScript/React)",
  "# ## 작업 범위": "# ## Task Range",
  "📊 개선 Task Summary": "📊 개선 Task Summary",
  "# 📊 개선 Task Summary": "# 📊 개선 Task Summary",
  "# # 📊 개선 작업 요약": "# # 📊 개선 Task Summary",
  "Docker Build Cache 및 Temporary files": "Docker Build Cache 및 Temporary files",
  "# Docker Build Cache 및 Temporary files": "# Docker Build Cache 및 Temporary files",
  "Docker Volume 및 Log Data": "Docker Volume 및 Log Data",
  "# Docker 볼륨 및 Log 데이터": "# Docker Volume 및 Log Data",
  "로컬 Development자 커스터마이징 (개인 Settings용)": "로컬 Development자 커스터마이징 (개인 Settings용)",
  "# 로컬 Development자 커스터마이징 (개인 설정용)": "# 로컬 Development자 커스터마이징 (개인 Settings용)",
  "실제 Environment Variables (Security상 Important)": "실제 Environment Variables (Security상 Important)",
  "# 실제 환경 변수 (Security상 Important)": "# 실제 Environment Variables (Security상 Important)",
  "Docker Compose 관련 File들": "Docker Compose 관련 File들",
  "# Docker Compose 관련 파일들": "# Docker Compose 관련 File들",
  "# 실행 결과 Confirm": "# Execute Result Confirm",
  "# 컨테이너 실행": "# Container Execute",
  "기존 Container가 있다면 Stop 및 Remove": "기존 Container가 있다면 Stop 및 Remove",
  "# 기존 컨테이너가 있다면 Stop 및 Remove": "# 기존 Container가 있다면 Stop 및 Remove",
  "색상 정의": "색상 정의",
  "# 색상 정의": "# 색상 정의",
  "Musashi 단Day Docker Container Execute Script": "Musashi 단Day Docker Container Execute Script",
  "# Musashi 단일 Docker 컨테이너 실행 스크립트": "# Musashi 단Day Docker Container Execute Script",
  "Backup 보존 기간 (Day)": "Backup 보존 기간 (Day)",
  "# 백업 보존 기간 (일)": "# Backup 보존 기간 (Day)",
  "# 백업 Save 경로": "# Backup Save Path",
  "Auto Backup 활성화": "Auto Backup 활성화",
  "# 자동 백업 활성화": "# Auto Backup 활성화",
  "Backup 및 복원 Settings": "Backup 및 복원 Settings",
  "# 백업 및 복원 Settings": "# Backup 및 복원 Settings",
  "# 캐싱 Settings": "# Caching Settings",
  "커넥션 Pull Settings": "커넥션 Pull Settings",
  "# 커넥션 풀 Settings": "# 커넥션 Pull Settings",
  "워커 프로세스 수 (CPU 코어 수에 맞게 조정)": "워커 프로세스 수 (CPU 코어 수에 맞게 조정)",
  "# 워커 프로세스 수 (CPU 코어 수에 맞게 조정)": "# 워커 프로세스 수 (CPU 코어 수에 맞게 조정)",
  "# 프로덕션 Optimization 설정": "# Production Optimization Settings",
  "Development용 MongoDB Express Management자 계정": "Development용 MongoDB Express Management자 계정",
  "# Development용 MongoDB Express 관리자 계정": "# Development용 MongoDB Express Management자 계정",
  "Development자 Tool Settings": "Development자 Tool Settings",
  "# Development자 도구 설정": "# Development자 Tool Settings",
  "S3 호환 스토리지 (File Upload용)": "S3 호환 스토리지 (File Upload용)",
  "# S3 호환 스토리지 (파일 업로드용)": "# S3 호환 스토리지 (File Upload용)",
  "외부 Service Settings": "외부 Service Settings",
  "# 외부 서비스 Settings": "# 외부 Service Settings",
  "이메Day Settings (Select사항)": "이메Day Settings (Select사항)",
  "# 이메일 설정 (Select사항)": "# 이메Day Settings (Select사항)",
  "헬스체크 엔드포인트 활성화": "헬스체크 엔드포인트 활성화",
  "# 헬스체크 엔드포인트 활성화": "# 헬스체크 엔드포인트 활성화",
  "애플리케이션 Metric 수집 활성화": "애플리케이션 Metric 수집 활성화",
  "# 애플리케이션 메트릭 수집 활성화": "# 애플리케이션 Metric 수집 활성화",
  "# Monitoring 설정": "# Monitoring Settings",
  "# CSP 정책 Settings": "# CSP Policy Settings",
  "Session 쿠Key Settings": "Session 쿠Key Settings",
  "# 세션 쿠키 Settings": "# Session 쿠Key Settings",
  "# Python 경로 설정 (Development시)": "# Python Path Settings (DevelopmentHour)",
  "File Change 감지 활성화 (DevelopmentHour)": "File Change 감지 활성화 (DevelopmentHour)",
  "# 파일 변경 감지 활성화 (Development시)": "# File Change 감지 활성화 (DevelopmentHour)",
  "Development용 Frontend Vite Server API URL": "Development용 Frontend Vite Server API URL",
  "# Development용 Frontend Vite 서버 API URL": "# Development용 Frontend Vite Server API URL",
  "Development Environment 전용 Settings": "Development Environment 전용 Settings",
  "# Development 환경 전용 설정": "# Development Environment 전용 Settings",
  "Redis 비밀Number (Redis 활성화Hour)": "Redis 비밀Number (Redis 활성화Hour)",
  "# Redis 비밀번호 (Redis 활성화시)": "# Redis 비밀Number (Redis 활성화Hour)",
  "Redis Settings (Select사항)": "Redis Settings (Select사항)",
  "# Redis 설정 (Select사항)": "# Redis Settings (Select사항)",
  "Allow할 Frontend URL (쉼표로 구Minute)": "Allow할 Frontend URL (쉼표로 구Minute)",
  "# 허용할 Frontend URL (쉼표로 구분)": "# Allow할 Frontend URL (쉼표로 구Minute)",
  "MongoDB Management자 계정 (Select사항 - Security 강화Hour 사용)": "MongoDB Management자 계정 (Select사항 - Security 강화Hour 사용)",
  "# MongoDB 관리자 계정 (Select사항 - Security 강화시 사용)": "# MongoDB Management자 계정 (Select사항 - Security 강화Hour 사용)",
  "Production에서는 127.0.0.1:27017 형태로 Limit 권장": "Production에서는 127.0.0.1:27017 형태로 Limit 권장",
  "# Production에서는 127.0.0.1:27017 형태로 제한 권장": "# Production에서는 127.0.0.1:27017 형태로 Limit 권장",
  "MongoDB Port (외부 노출용, DevelopmentHour에만 사용)": "MongoDB Port (외부 노출용, DevelopmentHour에만 사용)",
  "# MongoDB 포트 (외부 노출용, Development시에만 사용)": "# MongoDB Port (외부 노출용, DevelopmentHour에만 사용)",
  "# Database 이름": "# Database Name",
  "# JWT 토큰용 비밀키 (Required - 실제 환경에서는 안전한 값으로 변경)": "# JWT token secret key (Required - Change to secure value in production)",
  "Debug mode (production에서는 반드Hour false)": "Debug mode (production에서는 반드Hour false)",
  "# Debug 모드 (production에서는 반드시 false)": "# Debug mode (production에서는 반드Hour false)",
  "# 실행 환경 (production, development, testing)": "# Runtime environment (production, development, testing)",
  "# 애플리케이션 포트 (기본: 8080)": "# Application port (Default: 8080)",
  "# .env.example을 .env로 Copy한 후 실제 값으로 Modify하세요": "# Copy .env.example to .env and modify with actual values",
  "**행운을 빕니다! 🚀**": "**행운을 빕니다! 🚀**",
  "💬 **커뮤니티**: Development팀 또는 커뮤니티에서 Help Request": "💬 **커뮤니티**: Development팀 또는 커뮤니티에서 Help Request",
  "4. 💬 **커뮤니티**: Development팀 또는 커뮤니티에서 도움 요청": "4. 💬 **커뮤니티**: Development팀 또는 커뮤니티에서 Help Request",
  "🔍 **Log Analysis**: `docker-compose logs -f`로 에러 Check logs": "🔍 **Log Analysis**: `docker-compose logs -f`로 에러 Check logs",
  "3. 🔍 **Log 분석**: `docker-compose logs -f`로 에러 Check logs": "3. 🔍 **Log Analysis**: `docker-compose logs -f`로 에러 Check logs",
  "📖 **Documentation Confirm**: README.md 및 관련 Documentation Review": "📖 **Documentation Confirm**: README.md 및 관련 Documentation Review",
  "2. 📖 **Documentation Confirm**: README.md 및 관련 Documentation 검토": "2. 📖 **Documentation Confirm**: README.md 및 관련 Documentation Review",
  "🐛 **Issue Create**: GitHub Issues에 Problem Situation 보고": "🐛 **Issue Create**: GitHub Issues에 Problem Situation 보고",
  "1. 🐛 **이슈 Create**: GitHub Issues에 문제 상황 보고": "1. 🐛 **Issue Create**: GitHub Issues에 Problem Situation 보고",
  "문제가 발생하거나 질문이 있으시면:": "Problem가 발생하거나 질문이 있으Hour면:",
  "# # 🆘 지원": "# # 🆘 Support",
  "- [React 프로덕션 Build](https://create-react-app.dev/docs/production-build/)": "- [React Production Build](https://create-react-app.dev/docs/production-build/)",
  "- [Nginx 설정 Guide](https://nginx.org/en/docs/)": "- [Nginx Settings Guide](https://nginx.org/en/docs/)",
  "- [Docker Compose 공식 Documentation](https://docs.docker.com/compose/)": "- [Docker Compose 공식 Documentation](https://docs.docker.com/compose/)",
  "📚 Reference 자료": "📚 Reference 자료",
  "# 📚 Reference 자료": "# 📚 Reference 자료",
  "# # 📚 참고 자료": "# # 📚 Reference 자료",
  "# # 🔄 CI/CD 통합": "# # 🔄 CI/CD Integration",
  "SSD 스토리지 사용, Volume 드라이버 Optimization": "SSD 스토리지 사용, Volume 드라이버 Optimization",
  "# SSD 스토리지 사용, 볼륨 드라이버 Optimization": "# SSD 스토리지 사용, Volume 드라이버 Optimization",
  "### 볼륨 Performance": "# ## Volume Performance",
  "'1.0'       # Minimum CPU 보장": "'1.0'       # Minimum CPU 보장",
  "cpus: '1.0'       # 최소 CPU 보장": "cpus: '1.0'       # Minimum CPU 보장",
  "512M      # Minimum Memory 보장": "512M      # Minimum Memory 보장",
  "memory: 512M      # 최소 메모리 보장": "memory: 512M      # Minimum Memory 보장",
  "docker-compose.override.yml에서 Resource 조정": "docker-compose.override.yml에서 Resource 조정",
  "# docker-compose.override.yml에서 리소스 조정": "# docker-compose.override.yml에서 Resource 조정",
  "Resource 튜닝": "Resource 튜닝",
  "# Resource 튜닝": "# Resource 튜닝",
  "## Resource 튜닝": "# # Resource 튜닝",
  "# ## 리소스 튜닝": "# # # Resource 튜닝",
  "true  # 외부 인터넷 Block (필요Hour)": "true  # 외부 인터넷 Block (필요Hour)",
  "internal: true  # 외부 인터넷 차단 (필요시)": "internal: true  # 외부 인터넷 Block (필요Hour)",
  "Production용 Network 격리 Settings": "Production용 Network 격리 Settings",
  "# Production용 네트워크 격리 Settings": "# Production용 Network 격리 Settings",
  "### 네트워크 Security": "# ## Network Security",
  "- [ ] Log Monitoring 설정": "- [ ] Log Monitoring Settings",
  "- [ ] 정기적인 Security Update": "- [ ] 정기적인 Security Update",
  "- [ ] HTTPS 설정 (리버스 프록시 사용)": "- [ ] HTTPS Settings (리버스 프록Hour 사용)",
  "- [ ] 불필요한 포트 노출 제한": "- [ ] 불필요한 Port 노출 Limit",
  "- [ ] MongoDB 관리자 계정 설정 (`MONGO_ROOT_USERNAME`, `MONGO_ROOT_PASSWORD`)": "- [ ] MongoDB Management자 계정 Settings (`MONGO_ROOT_USERNAME`, `MONGO_ROOT_PASSWORD`)",
  "- [ ] `.env` 파일의 `SECRET_KEY` 변경": "- [ ] `.env` File의 `SECRET_KEY` Change",
  "Production Security 체크리스트": "Production Security 체크리스트",
  "# Production Security 체크리스트": "# Production Security 체크리스트",
  "## Production Security 체크리스트": "# # Production Security 체크리스트",
  "### 프로덕션 Security 체크리스트": "# # # Production Security 체크리스트",
  "MongoDB Second기화 Script가 Auto Execute됩니다": "MongoDB Second기화 Script가 Auto Execute됩니다",
  "# MongoDB 초기화 스크립트가 자동 실행됩니다": "# MongoDB Second기화 Script가 Auto Execute됩니다",
  "Backup이 없는 경우 - Second기 Data 재Create": "Backup이 없는 경우 - Second기 Data 재Create",
  "2. Backup이 없는 경우 - Second기 Data 재Create": "2. Backup이 없는 경우 - Second기 Data 재Create",
  "# 2. 백업이 없는 경우 - 초기 데이터 재Create": "# 2. Backup이 없는 경우 - Second기 Data 재Create",
  "Backup이 있는 경우": "Backup이 있는 경우",
  "1. Backup이 있는 경우": "1. Backup이 있는 경우",
  "# 1. 백업이 있는 경우": "# 1. Backup이 있는 경우",
  "MongoDB Data 손실Hour": "MongoDB Data 손실Hour",
  "# MongoDB Data 손실Hour": "# MongoDB Data 손실Hour",
  "## MongoDB Data 손실Hour": "# # MongoDB Data 손실Hour",
  "### MongoDB Data 손실Hour": "# # # MongoDB Data 손실Hour",
  "# ### MongoDB 데이터 손실시": "# # # # MongoDB Data 손실Hour",
  "Data 복구": "Data 복구",
  "# Data 복구": "# Data 복구",
  "## Data 복구": "# # Data 복구",
  "# ## 데이터 복구": "# # # Data 복구",
  "FastAPI 애플리케이션 Log": "FastAPI 애플리케이션 Log",
  "# FastAPI 애플리케이션 Log": "# FastAPI 애플리케이션 Log",
  "## FastAPI 애플리케이션 Log": "# # FastAPI 애플리케이션 Log",
  "### FastAPI 애플리케이션 Log": "# # # FastAPI 애플리케이션 Log",
  "#### FastAPI 애플리케이션 Log": "# # # # FastAPI 애플리케이션 Log",
  "Nginx 에러 Log": "Nginx 에러 Log",
  "# Nginx 에러 Log": "# Nginx 에러 Log",
  "## Nginx 에러 Log": "# # Nginx 에러 Log",
  "### Nginx 에러 Log": "# # # Nginx 에러 Log",
  "#### Nginx 에러 Log": "# # # # Nginx 에러 Log",
  "### Log 분석": "# ## Log Analysis",
  "또는 미사용 Image/Container 정리": "또는 미사용 Image/Container 정리",
  "# 또는 미사용 이미지/컨테이너 정리": "# 또는 미사용 Image/Container 정리",
  "Resource Limit 조정 (.env 또는 override.yml)": "Resource Limit 조정 (.env 또는 override.yml)",
  "Resolve: Resource Limit 조정 (.env 또는 override.yml)": "Resolve: Resource Limit 조정 (.env 또는 override.yml)",
  "# 해결: 리소스 제한 조정 (.env 또는 override.yml)": "# Resolve: Resource Limit 조정 (.env 또는 override.yml)",
  "Memory 부족": "Memory 부족",
  "5. Memory 부족": "5. Memory 부족",
  "# 5. Memory 부족": "# 5. Memory 부족",
  "## 5. Memory 부족": "# # 5. Memory 부족",
  "### 5. Memory 부족": "# # # 5. Memory 부족",
  "# ### 5. 메모리 부족": "# # # # 5. Memory 부족",
  "MongoDB Manual 헬스체크": "MongoDB Manual 헬스체크",
  "# MongoDB 수동 헬스체크": "# MongoDB Manual 헬스체크",
  "# 해결: MongoDB 컨테이너 상태 Confirm": "# Resolve: MongoDB Container Status Confirm",
  "#### 4. 데이터베이스 Connect Failed": "# ### 4. Database Connect Failed",
  "Cache 없이 재Build": "Cache 없이 재Build",
  "Resolve: Cache 없이 재Build": "Resolve: Cache 없이 재Build",
  "# 해결: Cache 없이 재Build": "# Resolve: Cache 없이 재Build",
  "#### 3. 이미지 Build Failed": "# ### 3. Image Build Failed",
  "Log아웃 후 다Hour Log인": "Log아웃 후 다Hour Log인",
  "# Log아웃 후 다시 Log인": "# Log아웃 후 다Hour Log인",
  "# 해결: Docker Group 권한 Confirm": "# Resolve: Docker Group Permission Confirm",
  "에러: \"permission denied\"": "에러: \"permission denied\"",
  "# 에러: \"permission denied\"": "# 에러: \"permission denied\"",
  "# ### 2. 권한 문제": "# ### 2. Permission Problem",
  ".env에서 Port Change": ".env에서 Port Change",
  "Resolve: .env에서 Port Change": "Resolve: .env에서 Port Change",
  "# 해결: .env에서 포트 변경": "# Resolve: .env에서 Port Change",
  "에러: \"port is already allocated\"": "에러: \"port is already allocated\"",
  "# 에러: \"port is already allocated\"": "# 에러: \"port is already allocated\"",
  "# ### 1. 포트 충돌": "# ### 1. Port Conflict",
  "Day반적인 Problem들": "Day반적인 Problem들",
  "# Day반적인 Problem들": "# Day반적인 Problem들",
  "## Day반적인 Problem들": "# # Day반적인 Problem들",
  "# ## 일반적인 문제들": "# # # Day반적인 Problem들",
  "# # 🚨 문제 해결": "# # 🚨 Problem Resolve",
  "특정 Container 세부 Info": "특정 Container 세부 Info",
  "# 특정 컨테이너 세부 Info": "# 특정 Container 세부 Info",
  "Container Resource 사Capacity": "Container Resource 사Capacity",
  "# 컨테이너 리소스 사용량": "# Container Resource 사Capacity",
  "### 리소스 Monitoring": "# ## Resource Monitoring",
  "Manual 헬스체크": "Manual 헬스체크",
  "# 수동 헬스체크": "# Manual 헬스체크",
  "헬스체크 Status Confirm": "헬스체크 Status Confirm",
  "# 헬스체크 상태 Confirm": "# 헬스체크 Status Confirm",
  "헬스체크 Monitoring": "헬스체크 Monitoring",
  "# 헬스체크 Monitoring": "# 헬스체크 Monitoring",
  "## 헬스체크 Monitoring": "# # 헬스체크 Monitoring",
  "### 헬스체크 Monitoring": "# # # 헬스체크 Monitoring",
  "Log File 직접 Access": "Log File 직접 Access",
  "# Log 파일 직접 접근": "# Log File 직접 Access",
  "특정 Service Log  ": "특정 Service Log  ",
  "# 특정 서비스 Log  ": "# 특정 Service Log  ",
  "전체 Service Log": "전체 Service Log",
  "# 전체 서비스 Log": "# 전체 Service Log",
  "📊 Monitoring 및 Log": "📊 Monitoring 및 Log",
  "# 📊 Monitoring 및 Log": "# 📊 Monitoring 및 Log",
  "## 📊 Monitoring 및 Log": "# # 📊 Monitoring 및 Log",
  "Development/Production 구Minute": "Development/Production 구Minute",
  "# Development/프로덕션 구분": "# Development/Production 구Minute",
  "# 포트 Settings": "# Port Settings",
  "`.env` 파일에서 주요 설정 조정:": "`.env` File에서 주요 Settings 조정:",
  "Environment Variables 커스터마이징": "Environment Variables 커스터마이징",
  "# Environment Variables 커스터마이징": "# Environment Variables 커스터마이징",
  "## Environment Variables 커스터마이징": "# # Environment Variables 커스터마이징",
  "# ## Environment Variables 커스터마이징": "# # # Environment Variables 커스터마이징",
  "    # Development용 볼륨 마운트": "    # Development용 Volume 마운트",
  "      - \"8081:8080\" # 8080 대신 8081 사용": "      - \"8081:8080\" # 8080 대신 8081 사용",
  "Port Change (Conflict 방지)": "Port Change (Conflict 방지)",
  "# 포트 변경 (충돌 방지)": "# Port Change (Conflict 방지)",
  "`docker-compose.override.yml` 파일을 개인 설정에 맞게 Modify:": "`docker-compose.override.yml` File을 개인 Settings에 맞게 Modify:",
  "로컬 Development자 Settings": "로컬 Development자 Settings",
  "# 로컬 Development자 Settings": "# 로컬 Development자 Settings",
  "## 로컬 Development자 Settings": "# # 로컬 Development자 Settings",
  "### 로컬 Development자 설정": "# # # 로컬 Development자 Settings",
  "🔧 커스터마이징": "🔧 커스터마이징",
  "# 🔧 커스터마이징": "# 🔧 커스터마이징",
  "# # 🔧 커스터마이징": "# # 🔧 커스터마이징",
  "MongoDB Data 복원": "MongoDB Data 복원",
  "# MongoDB 데이터 복원": "# MongoDB Data 복원",
  "# MongoDB 데이터 백업": "# MongoDB Data Backup",
  "MongoDB Container 접속": "MongoDB Container 접속",
  "# MongoDB 컨테이너 접속": "# MongoDB Container 접속",
  "# ## Database 관리": "# ## Database Management",
  "# 서비스 상태 Confirm": "# Service Status Confirm",
  "특정 Service Check logs": "특정 Service Check logs",
  "# 특정 서비스 Check logs": "# 특정 Service Check logs",
  "특정 Service만 재Start": "특정 Service만 재Start",
  "# 특정 서비스만 재Start": "# 특정 Service만 재Start",
  "개별 Service Management": "개별 Service Management",
  "# 개별 Service Management": "# 개별 Service Management",
  "## 개별 Service Management": "# # 개별 Service Management",
  "# ## 개별 서비스 관리": "# # # 개별 Service Management",
  "모든 Option 조합": "모든 Option 조합",
  "# 모든 옵션 조합": "# 모든 Option 조합",
  "Start 후 Log Monitoring": "Start 후 Log Monitoring",
  "# Start 후 Log Monitoring": "# Start 후 Log Monitoring",
  "기존 Data 정리 후 Start": "기존 Data 정리 후 Start",
  "# 기존 데이터 정리 후 Start": "# 기존 Data 정리 후 Start",
  "Image 강제 재Build": "Image 강제 재Build",
  "# 이미지 강제 재Build": "# Image 강제 재Build",
  "### Start 스크립트 옵션": "# ## Start Script Option",
  "⚙️ 고급 Usage": "⚙️ 고급 Usage",
  "# ⚙️ 고급 Usage": "# ⚙️ 고급 Usage",
  "# # ⚙️ 고급 Usage": "# # ⚙️ 고급 Usage",
  "또는 Start Script 사용": "또는 Start Script 사용",
  "# 또는 Start 스크립트 사용": "# 또는 Start Script 사용",
  "### 🏗️ Build Testing 환경": "# ## 🏗️ Build Testing Environment",
  "# MongoDB Express 관리 도구": "# MongoDB Express Management Tool",
  "# Redis Development 서버 Add": "# Redis Development Server Add",
  "# Frontend Development 서버 Add": "# Frontend Development Server Add",
  "**Select적 서비스 실행:**": "**Select적 Service Execute:**",
  "- Select적 Development 도구들 (profiles 사용)": "- Select적 Development Tool들 (profiles 사용)",
  "- 포트 노출 (백엔드 8000, MongoDB 27017)": "- Port 노출 (Backend 8000, MongoDB 27017)",
  "- Debug 모드 활성화": "- Debug mode 활성화",
  "- 소스 코드 핫 리로드": "- 소스 Code 핫 Reload",
  "**특징:**": "**특징:**",
  "또는 Start Script 사용  ": "또는 Start Script 사용  ",
  "# 또는 Start 스크립트 사용  ": "# 또는 Start Script 사용  ",
  "# Development 환경 실행": "# Development Environment Execute",
  "### 🧪 Development 환경": "# ## 🧪 Development Environment",
  "- MongoDB 인증 활성화": "- MongoDB Authentication 활성화",
  "- 리소스 제한 Apply": "- Resource Limit Apply",
  "- Security 강화 (non-root 사용자)": "- Security 강화 (non-root User)",
  "- Optimization된 이미지 크기": "- Optimization된 Image Size",
  "- 단일 컨테이너 아키텍처": "- 단Day Container 아Key텍처",
  "# 기본 Production 실행": "# Default Production Execute",
  "# ## 🏭 Production 환경": "# ## 🏭 Production Environment",
  "🛠️ Environment별 Usage": "🛠️ Environment별 Usage",
  "# 🛠️ Environment별 Usage": "# 🛠️ Environment별 Usage",
  "# # 🛠️ 환경별 Usage": "# # 🛠️ Environment별 Usage",
  "- 🔍 **헬스체크**: http://localhost:8080/health": "- 🔍 **헬스체크**: http://localhost:8080/health",
  "- 🌐 **웹 애플리케이션**: http://localhost:8080": "- 🌐 **Web 애플리케이션**: http://localhost:8080",
  "3Step: 접속 Confirm": "3Step: 접속 Confirm",
  "# 3Step: 접속 Confirm": "# 3Step: 접속 Confirm",
  "## 3Step: 접속 Confirm": "# # 3Step: 접속 Confirm",
  "### 3단계: 접속 Confirm": "# # # 3Step: 접속 Confirm",
  "또는 직접 Docker Compose Execute": "또는 직접 Docker Compose Execute",
  "# 또는 직접 Docker Compose 실행": "# 또는 직접 Docker Compose Execute",
  "Integration Start Script 사용 (권장)": "Integration Start Script 사용 (권장)",
  "# 통합 Start 스크립트 사용 (권장)": "# Integration Start Script 사용 (권장)",
  "# ## 2단계: Docker Compose 실행": "# ## 2Step: Docker Compose Execute",
  "**⚠️ Important**: 프로덕션에서는 반드시 `SECRET_KEY`를 안전한 값으로 변경하세요!": "**⚠️ Important**: Production에서는 반드Hour `SECRET_KEY`를 Security한 Value으로 Change하세요!",
  "SECRET_KEY 등 Required Value Settings (에디터로 .env File Edit)": "SECRET_KEY 등 Required Value Settings (에디터로 .env File Edit)",
  "# SECRET_KEY 등 Required 값 설정 (에디터로 .env 파일 Edit)": "# SECRET_KEY 등 Required Value Settings (에디터로 .env File Edit)",
  "# 환경 변수 파일 Create": "# Environment Variables File Create",
  "# ## 1단계: 환경 Settings": "# ## 1Step: Environment Settings",
  "🚀 빠른 Start": "🚀 빠른 Start",
  "# 🚀 빠른 Start": "# 🚀 빠른 Start",
  "## 🚀 빠른 Start": "# # 🚀 빠른 Start",
  "- **`scripts/docker-start.sh`** - 통합 Start 스크립트": "- **`scripts/docker-start.sh`** - Integration Start Script",
  "- **`mongodb/init/01-init-user.js`** - MongoDB 초기 설정": "- **`mongodb/init/01-init-user.js`** - MongoDB Second기 Settings",
  "Second기화 Script": "Second기화 Script",
  "3. Second기화 Script": "3. Second기화 Script",
  "# 3. Second기화 Script": "# 3. Second기화 Script",
  "## 3. Second기화 Script": "# # 3. Second기화 Script",
  "# ## 3. 초기화 스크립트": "# # # 3. Second기화 Script",
  "- **`.env`** - 실제 환경 변수 (Copy 후 Modify 필요)": "- **`.env`** - 실제 Environment Variables (Copy 후 Modify 필요)",
  "- **`.env.example`** - 환경 변수 템플릿": "- **`.env.example`** - Environment Variables Template",
  "# ## 2. 환경 Settings": "# ## 2. Environment Settings",
  "- **`docker-compose.override.yml`** - 로컬 Development자 커스터마이징": "- **`docker-compose.override.yml`** - 로컬 Development자 커스터마이징",
  "- **`docker-compose.dev.yml`** - Development 환경": "- **`docker-compose.dev.yml`** - Development Environment",
  "- **`docker-compose.yml`** - 프로덕션 환경 (기본)": "- **`docker-compose.yml`** - Production Environment (Default)",
  "핵심 Compose File": "핵심 Compose File",
  "1. 핵심 Compose File": "1. 핵심 Compose File",
  "# 1. 핵심 Compose File": "# 1. 핵심 Compose File",
  "## 1. 핵심 Compose File": "# # 1. 핵심 Compose File",
  "# ## 1. 핵심 Compose 파일": "# # # 1. 핵심 Compose File",
  "# # 📁 구성 파일": "# # 📁 Configuration File",
  "🏗️ 아Key텍처": "🏗️ 아Key텍처",
  "# 🏗️ 아Key텍처": "# 🏗️ 아Key텍처",
  "## 🏗️ 아Key텍처": "# # 🏗️ 아Key텍처",
  "# ## 🏗️ 아키텍처": "# # # 🏗️ 아Key텍처",
  "Musashi 프로젝트는 **단일 컨테이너 웹앱 아키텍처**를 기반으로 하여 Frontend(React) + 백엔드(FastAPI) + 웹서버(Nginx)가 하나의 Optimization된 컨테이너에서 실행됩니다.": "Musashi Project는 **단Day Container Web앱 아Key텍처**를 기반으로 하여 Frontend(React) + Backend(FastAPI) + WebServer(Nginx)가 하나의 Optimization된 Container에서 Execute됩니다.",
  "# # 📋 개요": "# # 📋 Overview",
  "🐳 Musashi Docker Compose 완벽 Guide": "🐳 Musashi Docker Compose 완벽 Guide",
  "# 🐳 Musashi Docker Compose 완벽 Guide": "# 🐳 Musashi Docker Compose 완벽 Guide",
  "**결론**: v1.0.0 릴리즈를 위한 모든 Required 요구사항이 충족되었습니다. Testing 커버리지는 추후 개선이 필요하지만, 릴리즈를 차단하는 요소는 아닙니다.": "**결론**: v1.0.0 릴리즈를 위한 모든 Required Requirement이 충족되었습니다. Testing 커버리지는 추후 개선이 필요하지만, 릴리즈를 Block하는 Element는 아닙니다.",
  "- ✅ Cosign verify 안내 (명령어 및 Description Add)": "- ✅ Cosign verify 안내 (Command 및 Description Add)",
  "- ✅ README Quick Start (GHCR) (섹션 Add 완료)": "- ✅ README Quick Start (GHCR) (Section Add Complete)",
  "- ✅ 라이선스 Confirm (MIT License)": "- ✅ 라이선스 Confirm (MIT License)",
  "- ✅ 이미지 크기 Optimization (Cache 정리, 불필요 파일 Remove)": "- ✅ Image Size Optimization (Cache 정리, 불필요 File Remove)",
  "- ✅ `.dockerignore` (Optimization된 설정 파일 존재)": "- ✅ `.dockerignore` (Optimization된 Settings File 존재)",
  "- ✅ 종Properties Security (Dependabot 설정 완료)": "- ✅ 종Properties Security (Dependabot Settings Complete)",
  "- ✅ Non-root 실행 (`musashi` 사용자로 실행)": "- ✅ Non-root Execute (`musashi` User로 Execute)",
  "- ✅ 기본 포트/헬스체크 (포트 80/8000, `/api/v1/health` 엔드포인트)": "- ✅ Default Port/헬스체크 (Port 80/8000, `/api/v1/health` 엔드포인트)",
  "- ✅ `.env.sample` 파일 (`.env.example` → `.env.sample` 변경 완료)": "- ✅ `.env.sample` File (`.env.example` → `.env.sample` Change Complete)",
  "Request된 Item Status:": "Request된 Item Status:",
  "# Request된 Item Status:": "# Request된 Item Status:",
  "## Request된 Item Status:": "# # Request된 Item Status:",
  "# ## 요청된 항목 상태:": "# # # Request된 Item Status:",
  "📋 체크리스트 Confirm Result": "📋 체크리스트 Confirm Result",
  "# 📋 체크리스트 Confirm Result": "# 📋 체크리스트 Confirm Result",
  "## 📋 체크리스트 Confirm 결과": "# # 📋 체크리스트 Confirm Result",
  "취약점 Confirm": "취약점 Confirm",
  "4. 취약점 Confirm": "4. 취약점 Confirm",
  "# 4. 취약점 Confirm": "# 4. 취약점 Confirm",
  "릴리즈 Validation": "릴리즈 Validation",
  "3. 릴리즈 Validation": "3. 릴리즈 Validation",
  "# 3. 릴리즈 검증": "# 3. 릴리즈 Validation",
  "Tag 푸Hour (Auto Build 및 Deployment Start)": "Tag 푸Hour (Auto Build 및 Deployment Start)",
  "2. Tag 푸Hour (Auto Build 및 Deployment Start)": "2. Tag 푸Hour (Auto Build 및 Deployment Start)",
  "# 2. 태그 푸시 (자동 Build 및 Deployment Start)": "# 2. Tag 푸Hour (Auto Build 및 Deployment Start)",
  "# 1. 버전 태그 Create": "# 1. Version Tag Create",
  "🚀 릴리즈 Command": "🚀 릴리즈 Command",
  "# 🚀 릴리즈 Command": "# 🚀 릴리즈 Command",
  "# # 🚀 릴리즈 명령어": "# # 🚀 릴리즈 Command",
  "| Testing | ⚠️ 부분 완료 | 65% |": "| Testing | ⚠️ 부Minute Complete | 65% |",
  "| Documentation화 | ✅ 완료 | 100% |": "| Documentation화 | ✅ Complete | 100% |",
  "| CI/CD | ✅ 완료 | 100% |": "| CI/CD | ✅ Complete | 100% |",
  "| Docker Optimization | ✅ 완료 | 100% |": "| Docker Optimization | ✅ Complete | 100% |",
  "| Security 강화 | ✅ 완료 | 100% |": "| Security 강화 | ✅ Complete | 100% |",
  "| 환경 설정 | ✅ 완료 | 100% |": "| Environment Settings | ✅ Complete | 100% |",
  "| 카테고리 | 상태 | 완료율 |": "| Category | Status | Complete율 |",
  "📊 릴리즈 준비 Status Summary": "📊 릴리즈 준비 Status Summary",
  "# 📊 릴리즈 준비 Status Summary": "# 📊 릴리즈 준비 Status Summary",
  "# # 📊 릴리즈 준비 상태 요약": "# # 📊 릴리즈 준비 Status Summary",
  "- [ ] WAF Rules 정의": "- [ ] WAF Rules 정의",
  "- [ ] Rate Limiting 구현": "- [ ] Rate Limiting 구현",
  "- [ ] Security Headers 설정 (nginx)": "- [ ] Security Headers Settings (nginx)",
  "Add Security 강화": "Add Security 강화",
  "# Add Security 강화": "# Add Security 강화",
  "## Add Security 강화": "# # Add Security 강화",
  "### Add Security 강화": "# # # Add Security 강화",
  "- [ ] 불필요한 패키지 Remove": "- [ ] 불필요한 패Key지 Remove",
  "- [ ] Alpine 기반 이미지 검토": "- [ ] Alpine 기반 Image Review",
  "- [ ] 이미지 크기: 365MB → 목표 <300MB": "- [ ] Image Size: 365MB → Goal <300MB",
  "- [ ] E2E Testing Add 필요": "- [ ] E2E Testing Add 필요",
  "- [ ] Backend 커버리지: 현재 ~66% → 목표 85%+": "- [ ] Backend 커버리지: 현재 ~66% → Goal 85%+",
  "- [ ] Frontend 커버리지: 현재 ~60% → 목표 85%+": "- [ ] Frontend 커버리지: 현재 ~60% → Goal 85%+",
  "Testing 커버리지": "Testing 커버리지",
  "# Testing 커버리지": "# Testing 커버리지",
  "## Testing 커버리지": "# # Testing 커버리지",
  "### Testing 커버리지": "# # # Testing 커버리지",
  "⚠️ 권장 개선사항 (릴리즈 후)": "⚠️ 권장 개선사항 (릴리즈 후)",
  "# ⚠️ 권장 개선사항 (릴리즈 후)": "# ⚠️ 권장 개선사항 (릴리즈 후)",
  "# # ⚠️ 권장 개선사항 (릴리즈 후)": "# # ⚠️ 권장 개선사항 (릴리즈 후)",
  "- [x] **EXPOSE 지시문**: Dockerfile에 포트 명시": "- [x] **EXPOSE 지Hour문**: Dockerfile에 Port 명Hour",
  "- [x] **헬스체크 엔드포인트**: `/api/v1/health`": "- [x] **헬스체크 엔드포인트**: `/api/v1/health`",
  "- [x] **기본 포트 설정**: 80 (nginx), 8000 (FastAPI)": "- [x] **Default Port Settings**: 80 (nginx), 8000 (FastAPI)",
  "Port 및 Network ✅": "Port 및 Network ✅",
  "6. Port 및 Network ✅": "6. Port 및 Network ✅",
  "# 6. Port 및 Network ✅": "# 6. Port 및 Network ✅",
  "## 6. Port 및 Network ✅": "# # 6. Port 및 Network ✅",
  "# ## 6. 포트 및 네트워크 ✅": "# # # 6. Port 및 Network ✅",
  "- [x] **LICENSE**: MIT 라이선스 Confirm": "- [x] **LICENSE**: MIT 라이선스 Confirm",
  "- [x] **CONTRIBUTING.md**: 기여 Guide라인": "- [x] **CONTRIBUTING.md**: 기여 Guide라인",
  "- [x] **SECURITY.md**: Security 정책 및 모범 사례": "- [x] **SECURITY.md**: Security Policy 및 모범 사례",
  "- [x] **INSTALL.md**: 설치 Guide": "- [x] **INSTALL.md**: 설치 Guide",
  "- [x] **CHANGELOG.md**: v1.0.0 릴리즈 노트": "- [x] **CHANGELOG.md**: v1.0.0 릴리즈 노트",
  "  - Security 섹션 Add": "  - Security Section Add",
  "- Cosign verify 명령어 안내": "- Cosign verify Command 안내",
  "  - GHCR Quick Start 섹션 Add": "  - GHCR Quick Start Section Add",
  "Documentation화 ✅": "Documentation화 ✅",
  "5. Documentation화 ✅": "5. Documentation화 ✅",
  "# 5. Documentation화 ✅": "# 5. Documentation화 ✅",
  "## 5. Documentation화 ✅": "# # 5. Documentation화 ✅",
  "### 5. Documentation화 ✅": "# # # 5. Documentation화 ✅",
  "- [x] **Dependabot 설정**: 종Properties 자동 Update": "- [x] **Dependabot Settings**: 종Properties Auto Update",
  "- [x] **SBOM Create**: SPDX/CycloneDX 형식": "- [x] **SBOM Create**: SPDX/CycloneDX Format",
  "- [x] **Trivy 스캔**: HIGH/CRITICAL 취약점 시 Build Failed": "- [x] **Trivy 스캔**: HIGH/CRITICAL 취약점 Hour Build Failed",
  "- [x] **Cosign Keyless 서명**: OIDC 기반 컨테이너 서명": "- [x] **Cosign Keyless 서명**: OIDC 기반 Container 서명",
  "- [x] **GHCR 자동 푸시**: GitHub Container Registry 통합": "- [x] **GHCR Auto 푸Hour**: GitHub Container Registry Integration",
  "- [x] **GitHub Actions 워크플로우**: `.github/workflows/release.yml`": "- [x] **GitHub Actions 워크플로우**: `.github/workflows/release.yml`",
  "CI/CD 및 Security 스캔 ✅": "CI/CD 및 Security 스캔 ✅",
  "4. CI/CD 및 Security 스캔 ✅": "4. CI/CD 및 Security 스캔 ✅",
  "# 4. CI/CD 및 Security 스캔 ✅": "# 4. CI/CD 및 Security 스캔 ✅",
  "## 4. CI/CD 및 Security 스캔 ✅": "# # 4. CI/CD 및 Security 스캔 ✅",
  "### 4. CI/CD 및 Security 스캔 ✅": "# # # 4. CI/CD 및 Security 스캔 ✅",
  "- [x] **Multi-architecture 지원**: linux/amd64, linux/arm64": "- [x] **Multi-architecture Support**: linux/amd64, linux/arm64",
  "- [x] **Multi-stage Build**: Frontend 빌더와 런타임 분리": "- [x] **Multi-stage Build**: Frontend 빌더와 런타임 Separate",
  "  - pyc 파일 및 __pycache__ Delete": "  - pyc File 및 __pycache__ Delete",
  "- npm cache 정리": "- npm cache 정리",
  "- [x] **이미지 크기 Optimization**:": "- [x] **Image Size Optimization**:",
  "- [x] **.dockerignore 파일**: 불필요한 파일 제외 설정 완료": "- [x] **.dockerignore File**: 불필요한 File 제외 Settings Complete",
  "- [x] **적절한 권한 설정**: nginx 및 앱 디렉토리 권한 조정": "- [x] **적절한 Permission Settings**: nginx 및 앱 Directory Permission 조정",
  "- [x] **curl 설치**: 헬스체크를 위한 curl Add": "- [x] **curl 설치**: 헬스체크를 위한 curl Add",
  "- [x] **HEALTHCHECK Add**: 30초 간격 헬스체크 구현": "- [x] **HEALTHCHECK Add**: 30Second Interval 헬스체크 구현",
  "- [x] **Non-root 사용자 실행**: `musashi` 사용자 Create 및 권한 설정": "- [x] **Non-root User Execute**: `musashi` User Create 및 Permission Settings",
  "Security 강화 ✅": "Security 강화 ✅",
  "2. Security 강화 ✅": "2. Security 강화 ✅",
  "# 2. Security 강화 ✅": "# 2. Security 강화 ✅",
  "## 2. Security 강화 ✅": "# # 2. Security 강화 ✅",
  "### 2. Security 강화 ✅": "# # # 2. Security 강화 ✅",
  "- [x] 기본 값 및 Example 제공": "- [x] Default Value 및 Example 제공",
  "- [x] 모든 Required 환경 변수 Documentation화": "- [x] 모든 Required Environment Variables Documentation화",
  "- [x] `.env.example` → `.env.sample`로 변경 완료": "- [x] `.env.example` → `.env.sample`로 Change Complete",
  "# ## 1. 환경 Settings ✅": "# ## 1. Environment Settings ✅",
  "✅ Complete된 Item": "✅ Complete된 Item",
  "# ✅ Complete된 Item": "# ✅ Complete된 Item",
  "# # ✅ 완료된 항목": "# # ✅ Complete된 Item",
  "단Day Container 모드 (권장)": "단Day Container 모드 (권장)",
  "# 단Day Container 모드 (권장)": "# 단Day Container 모드 (권장)",
  "## 단Day Container 모드 (권장)": "# # 단Day Container 모드 (권장)",
  "# ## 단일 컨테이너 모드 (권장)": "# # # 단Day Container 모드 (권장)",
  "Docker Compose Development (레거Hour)": "Docker Compose Development (레거Hour)",
  "# Docker Compose Development (레거Hour)": "# Docker Compose Development (레거Hour)",
  "## Docker Compose Development (레거Hour)": "# # Docker Compose Development (레거Hour)",
  "# ## Docker Compose Development (레거시)": "# # # Docker Compose Development (레거Hour)",
  "make docker-run              # 컨테이너 실행": "make docker-run              # Container Execute",
  "make docker-build            # Docker 이미지 Build": "make docker-build            # Docker Image Build",
  "Make Command (단Day Container)": "Make Command (단Day Container)",
  "# Make 명령어 (단일 컨테이너)": "# Make Command (단Day Container)",
  "docker restart musashi        # 재Start": "docker restart musashi        # 재Start",
  "# 컨테이너 관리": "# Container Management",
  "단Day Container Execute (Frontend: 80Port, Backend API: 8080Port)": "단Day Container Execute (Frontend: 80Port, Backend API: 8080Port)",
  "# 단일 컨테이너 실행 (Frontend: 80포트, Backend API: 8080포트)": "# 단Day Container Execute (Frontend: 80Port, Backend API: 8080Port)",
  "# Docker 이미지 Build": "# Docker Image Build",
  "Docker Single Container (권장)": "Docker Single Container (권장)",
  "# Docker Single Container (권장)": "# Docker Single Container (권장)",
  "## Docker Single Container (권장)": "# # Docker Single Container (권장)",
  "# ## Docker Single Container (권장)": "# # # Docker Single Container (권장)",
  "SBOM 첨부 및 서명": "SBOM 첨부 및 서명",
  "# SBOM 첨부 및 서명": "# SBOM 첨부 및 서명",
  "Image 서명": "Image 서명",
  "# 이미지 서명": "# Image 서명",
  "Keyless 서명 (OIDC 기반)": "Keyless 서명 (OIDC 기반)",
  "# Keyless 서명 (OIDC 기반)": "# Keyless 서명 (OIDC 기반)",
  ".github/workflows/release.yml에 구현됨": ".github/workflows/release.yml에 구현됨",
  "# .github/workflows/release.yml에 구현됨": "# .github/workflows/release.yml에 구현됨",
  "    exit-code: '1'  # HIGH/CRITICAL 발견 시 Build Failed": "    exit-code: '1'  # HIGH/CRITICAL 발견 Hour Build Failed",
  "💡 **Tip**: 이 체크리스트를 즐겨찾기에 Add하여 Development 시 항상 참고하세요!": "💡 **Tip**: 이 체크리스트를 즐겨찾기에 Add하여 Development Hour 항상 Reference하세요!",
  "<Badge variant=\"warning\">진행중</Badge>": "<Badge variant=\"warning\">Progress중</Badge>",
  "// 상태 표시": "// Status 표Hour",
  "<Typography variant=\"h4\" className=\"mb-2\">카드 제목</Typography>": "<Typography variant=\"h4\" className=\"mb-2\">카드 Title</Typography>",
  "// 기본 카드": "// Default 카드",
  "주요 액션": "주요 액션",
  "// 주요 액션 버튼": "// 주요 액션 버튼",
  "  Description 내용": "  Description 내용",
  "// Description 텍스트": "// Description 텍스트",
  "<Typography variant=\"h2\" className=\"mb-4\">섹션 제목</Typography>": "<Typography variant=\"h2\" className=\"mb-4\">Section Title</Typography>",
  "// 섹션 제목": "// Section Title",
  "<Typography variant=\"h1\" className=\"mb-6\">페이지 제목</Typography>": "<Typography variant=\"h1\" className=\"mb-6\">페이지 Title</Typography>",
  "// 페이지 제목": "// 페이지 Title",
  "자주 사용하는 Pattern": "자주 사용하는 Pattern",
  "# 자주 사용하는 Pattern": "# 자주 사용하는 Pattern",
  "## 자주 사용하는 Pattern": "# # 자주 사용하는 Pattern",
  "# ## 자주 사용하는 패턴": "# # # 자주 사용하는 Pattern",
  "📚 빠른 Reference": "📚 빠른 Reference",
  "# 📚 빠른 Reference": "# 📚 빠른 Reference",
  "## 📚 빠른 Reference": "# # 📚 빠른 Reference",
  "window.musashiGuide.showGuide('h1'); // Guide 표시": "window.musashiGuide.showGuide('h1'); // Guide 표Hour",
  "// Development 중 브라우저 콘솔에서 사용 가능": "// Development 중 브라우저 콘솔에서 사용 가능",
  "Development Environment 체커": "Development Environment 체커",
  "# Development Environment 체커": "# Development Environment 체커",
  "## Development Environment 체커": "# # Development Environment 체커",
  "### Development 환경 체커": "# # # Development Environment 체커",
  "VS Code 스니펫 사용": "VS Code 스니펫 사용",
  "# VS Code 스니펫 사용": "# VS Code 스니펫 사용",
  "## VS Code 스니펫 사용": "# # VS Code 스니펫 사용",
  "# ## VS Code 스니펫 사용": "# # # VS Code 스니펫 사용",
  "## 🔧 Development 도구": "# # 🔧 Development Tool",
  "→ Navbar, Footer, Hero 컴포넌트 사용": "→ Navbar, Footer, Hero Component 사용",
  "**페이지 레이아웃(헤더/푸터/히어로)이 필요한가?**": "**페이지 레이아웃(헤더/푸터/히어로)이 필요한가?**",
  "7. **페이지 레이아웃(헤더/푸터/히어로)이 필요한가?**": "7. **페이지 레이아웃(헤더/푸터/히어로)이 필요한가?**",
  "→ Carousel 컴포넌트 사용": "→ Carousel Component 사용",
  "**여러 Image나 콘텐츠를 순서대로 보여줘야 하는가?**": "**여러 Image나 콘텐츠를 순서대로 보여줘야 하는가?**",
  "6. **여러 이미지나 콘텐츠를 순서대로 보여줘야 하는가?**": "6. **여러 Image나 콘텐츠를 순서대로 보여줘야 하는가?**",
  "→ Badge 컴포넌트 사용": "→ Badge Component 사용",
  "**Status나 라벨을 표Hour해야 하는가?**": "**Status나 라벨을 표Hour해야 하는가?**",
  "5. **상태나 라벨을 표시해야 하는가?**": "5. **Status나 라벨을 표Hour해야 하는가?**",
  "→ Card 컴포넌트 사용": "→ Card Component 사용",
  "**콘텐츠를 Group화해야 하는가?**": "**콘텐츠를 Group화해야 하는가?**",
  "4. **콘텐츠를 Group화해야 하는가?**": "4. **콘텐츠를 Group화해야 하는가?**",
  "→ Input 컴포넌트 사용": "→ Input Component 사용",
  "**User Input이 필요한가?**": "**User Input이 필요한가?**",
  "3. **사용자 입력이 필요한가?**": "3. **User Input이 필요한가?**",
  "→ Button 컴포넌트 사용": "→ Button Component 사용",
  "**User 액션(클릭)이 필요한가?**": "**User 액션(클릭)이 필요한가?**",
  "2. **사용자 액션(클릭)이 필요한가?**": "2. **User 액션(클릭)이 필요한가?**",
  "→ Typography 컴포넌트 사용": "→ Typography Component 사용",
  "**텍스트 표Hour가 필요한가?**": "**텍스트 표Hour가 필요한가?**",
  "1. **텍스트 표시가 필요한가?**": "1. **텍스트 표Hour가 필요한가?**",
  "📋 구현 전 질문 리스트": "📋 구현 전 질문 리스트",
  "# 📋 구현 전 질문 리스트": "# 📋 구현 전 질문 리스트",
  "# # 📋 구현 전 질문 리스트": "# # 📋 구현 전 질문 리스트",
  "<Card variant=\"default\">파란 배경</Card>": "<Card variant=\"default\">파란 배경</Card>",
  "<Typography variant=\"body\" color=\"light\">회색 텍스트</Typography>": "<Typography variant=\"body\" color=\"light\">회색 텍스트</Typography>",
  "// 컴포넌트 props 사용": "// Component props 사용",
  "<div style={{color: theme.theme.colorTextLight}}>텍스트</div>": "<div style={{color: theme.theme.colorTextLight}}>텍스트</div>",
  "// 테마 시스템 사용": "// 테마 Hour스템 사용",
  "<Input placeholder=\"입력하세요\" />": "<Input placeholder=\"Input하세요\" />",
  "<Button variant=\"primary\">버튼</Button>": "<Button variant=\"primary\">버튼</Button>",
  "// Musashi 컴포넌트 사용": "// Musashi Component 사용",
  "✅ 올바른 사용": "✅ 올바른 사용",
  "# ✅ 올바른 사용": "# ✅ 올바른 사용",
  "## ✅ 올바른 사용": "# # ✅ 올바른 사용",
  "# ## ✅ 올바른 사용": "# # # ✅ 올바른 사용",
  "<div className=\"bg-blue-100 p-4\">파란 배경</div>": "<div className=\"bg-blue-100 p-4\">파란 배경</div>",
  "<p className=\"text-gray-500\">회색 텍스트</p>": "<p className=\"text-gray-500\">회색 텍스트</p>",
  "// Tailwind 색상 클래스 직접 사용": "// Tailwind 색상 클래스 직접 사용",
  "<div style={{color: '#ff0000', fontSize: '16px'}}>텍스트</div>": "<div style={{color: '#ff0000', fontSize: '16px'}}>텍스트</div>",
  "// 인라인 스타일 사용": "// 인라인 스타Day 사용",
  "<button className=\"bg-blue-500 text-white px-4 py-2 rounded\">버튼</button>": "<button className=\"bg-blue-500 text-white px-4 py-2 rounded\">버튼</button>",
  "<h1 className=\"text-4xl font-bold\">제목</h1>": "<h1 className=\"text-4xl font-bold\">Title</h1>",
  "// HTML 태그 직접 사용": "// HTML Tag 직접 사용",
  "❌ 잘못된 사용": "❌ 잘못된 사용",
  "# ❌ 잘못된 사용": "# ❌ 잘못된 사용",
  "## ❌ 잘못된 사용": "# # ❌ 잘못된 사용",
  "# ## ❌ 잘못된 사용": "# # # ❌ 잘못된 사용",
  "🚫 피해야 할 Pattern": "🚫 피해야 할 Pattern",
  "# 🚫 피해야 할 Pattern": "# 🚫 피해야 할 Pattern",
  "# # 🚫 피해야 할 패턴": "# # 🚫 피해야 할 Pattern",
  "- [ ] 페이지 하단 → `<Footer>`": "- [ ] 페이지 하단 → `<Footer>`",
  "- [ ] 메인 히어로 섹션 → `<Hero>`": "- [ ] 메인 히어로 Section → `<Hero>`",
  "- [ ] 네비게이션 바 → `<Navbar>`": "- [ ] 네비게이션 바 → `<Navbar>`",
  "페이지 레이아웃 관련": "페이지 레이아웃 관련",
  "# 페이지 레이아웃 관련": "# 페이지 레이아웃 관련",
  "## 페이지 레이아웃 관련": "# # 페이지 레이아웃 관련",
  "# ## 페이지 레이아웃 관련": "# # # 페이지 레이아웃 관련",
  "- [ ] 다중 아이템 표시 → `<Carousel itemsPerView={3}>`": "- [ ] 다중 아이템 표Hour → `<Carousel itemsPerView={3}>`",
  "- [ ] Auto play 필요 시 → `<Carousel autoPlay>`": "- [ ] Auto play 필요 Hour → `<Carousel autoPlay>`",
  "- [ ] 이미지 갤러리/슬라이더 → `<Carousel>`": "- [ ] Image 갤러리/슬라이더 → `<Carousel>`",
  "Image 슬라이더 관련": "Image 슬라이더 관련",
  "# Image 슬라이더 관련": "# Image 슬라이더 관련",
  "## Image 슬라이더 관련": "# # Image 슬라이더 관련",
  "# ## 이미지 슬라이더 관련": "# # # Image 슬라이더 관련",
  "- [ ] 새로운 기능 표시 → `<Badge variant=\"primary\">New</Badge>`": "- [ ] 새로운 Feature 표Hour → `<Badge variant=\"primary\">New</Badge>`",
  "- [ ] 상태 라벨 → `<Badge variant=\"success|warning|danger\">`": "- [ ] Status 라벨 → `<Badge variant=\"success|warning|danger\">`",
  "Status 표Hour 관련": "Status 표Hour 관련",
  "# Status 표Hour 관련": "# Status 표Hour 관련",
  "## Status 표Hour 관련": "# # Status 표Hour 관련",
  "# ## 상태 표시 관련": "# # # Status 표Hour 관련",
  "- [ ] Hover effect 필요 시 → `<Card hover>`": "- [ ] Hover effect 필요 Hour → `<Card hover>`",
  "- [ ] 이미지가 있는 카드 → `<Card image=\"...\" imageAlt=\"...\">`": "- [ ] Image가 있는 카드 → `<Card image=\"...\" imageAlt=\"...\">`",
  "- [ ] 콘텐츠 Group핑 시 → `<Card>`": "- [ ] 콘텐츠 Group핑 Hour → `<Card>`",
  "카드/Container 관련": "카드/Container 관련",
  "# 카드/Container 관련": "# 카드/Container 관련",
  "## 카드/Container 관련": "# # 카드/Container 관련",
  "# ## 카드/컨테이너 관련": "# # # 카드/Container 관련",
  "- [ ] 도움말: `<Input helpText=\"도움말\">`": "- [ ] Help말: `<Input helpText=\"Help말\">`",
  "- [ ] 에러 상태: `<Input error=\"에러 메시지\">`": "- [ ] 에러 Status: `<Input error=\"에러 메Hour지\">`",
  "- [ ] 라벨 필요: `<Input label=\"라벨명\">`": "- [ ] 라벨 필요: `<Input label=\"라벨명\">`",
  "- [ ] `<input>` 대신 → `<Input>`": "- [ ] `<input>` 대신 → `<Input>`",
  "Input 관련": "Input 관련",
  "# Input 관련": "# Input 관련",
  "## Input 관련": "# # Input 관련",
  "# ## 입력 관련": "# # # Input 관련",
  "- [ ] 비활성화: `<Button disabled>`": "- [ ] 비활성화: `<Button disabled>`",
  "- [ ] `<button>` 대신 → `<Button variant=\"primary|secondary|tertiary\">`": "- [ ] `<button>` 대신 → `<Button variant=\"primary|secondary|tertiary\">`",
  "버튼 관련": "버튼 관련",
  "# 버튼 관련": "# 버튼 관련",
  "## 버튼 관련": "# # 버튼 관련",
  "# ## 버튼 관련": "# # # 버튼 관련",
  "- [ ] Text color: `text-gray-500` 대신 → `<Typography color=\"light\">`": "- [ ] Text color: `text-gray-500` 대신 → `<Typography color=\"light\">`",
  "- [ ] `<span>` 대신 → `<Typography variant=\"small\">`": "- [ ] `<span>` 대신 → `<Typography variant=\"small\">`",
  "- [ ] `<p>` 대신 → `<Typography variant=\"body\">`": "- [ ] `<p>` 대신 → `<Typography variant=\"body\">`",
  "- [ ] `<h1>`, `<h2>`, `<h3>`, `<h4>` 대신 → `<Typography variant=\"h1|h2|h3|h4\">`": "- [ ] `<h1>`, `<h2>`, `<h3>`, `<h4>` 대신 → `<Typography variant=\"h1|h2|h3|h4\">`",
  "텍스트 관련": "텍스트 관련",
  "# 텍스트 관련": "# 텍스트 관련",
  "## 텍스트 관련": "# # 텍스트 관련",
  "# ## 텍스트 관련": "# # # 텍스트 관련",
  "✅ Default 체크리스트": "✅ Default 체크리스트",
  "# ✅ Default 체크리스트": "# ✅ Default 체크리스트",
  "# # ✅ 기본 체크리스트": "# # ✅ Default 체크리스트",
  "새로운 UI를 구현하기 전 반드시 Confirm해야 할 항목들입니다.": "새로운 UI를 구현하기 전 반드Hour Confirm해야 할 Item들입니다.",
  "🎯 Musashi Component 사용 체크리스트": "🎯 Musashi Component 사용 체크리스트",
  "# 🎯 Musashi 컴포넌트 사용 체크리스트": "# 🎯 Musashi Component 사용 체크리스트",
  "//     // ... 기존 설정": "//     // ... 기존 Settings",
  "// Usage: .eslintrc.js에 Add": "// Usage: .eslintrc.js에 Add",
  "'배경색 클래스 대신 적절한 Component나 테마 Hour스템을 사용하세요'": "'배경색 클래스 대신 적절한 Component나 테마 Hour스템을 사용하세요'",
  "message: '배경색 클래스 대신 적절한 컴포넌트나 테마 시스템을 사용하세요'": "message: '배경색 클래스 대신 적절한 Component나 테마 Hour스템을 사용하세요'",
  "'Tailwind 색상 클래스 대신 Typography Component의 color prop을 사용하세요'": "'Tailwind 색상 클래스 대신 Typography Component의 color prop을 사용하세요'",
  "message: 'Tailwind 색상 클래스 대신 Typography 컴포넌트의 color prop을 사용하세요'": "message: 'Tailwind 색상 클래스 대신 Typography Component의 color prop을 사용하세요'",
  "// 특정 className 패턴 금지": "// 특정 className Pattern 금지",
  "'인라인 스타Day 대신 테마 Hour스템이나 Component props를 사용하세요'": "'인라인 스타Day 대신 테마 Hour스템이나 Component props를 사용하세요'",
  "message: '인라인 스타일 대신 테마 시스템이나 컴포넌트 props를 사용하세요'": "message: '인라인 스타Day 대신 테마 Hour스템이나 Component props를 사용하세요'",
  "// 인라인 스타일 금지": "// 인라인 스타Day 금지",
  "'HTML Tag 대신 Musashi Component를 사용하세요. h1-h6,p → Typography, button → Button, input → Input'": "'HTML Tag 대신 Musashi Component를 사용하세요. h1-h6,p → Typography, button → Button, input → Input'",
  "message: 'HTML 태그 대신 Musashi 컴포넌트를 사용하세요. h1-h6,p → Typography, button → Button, input → Input'": "message: 'HTML Tag 대신 Musashi Component를 사용하세요. h1-h6,p → Typography, button → Button, input → Input'",
  "// HTML 태그 직접 사용 금지": "// HTML Tag 직접 사용 금지",
  "// ESLint Rules: Musashi 컴포넌트 사용 강제": "// ESLint Rules: Musashi Component 사용 강제",
  "// Dagre 레이아웃 엔진 사전 번들링": "// Dagre 레이아웃 엔진 사전 번들링",
  "// React 관련 라이브러리 분리": "// React 관련 Library Separate",
  "// dagre를 별도 청크로 분리": "// dagre를 별도 청크로 Separate",
  "// Development 환경에서만 전역 헬퍼 함수 제공": "// Development Environment에서만 전역 헬퍼 함수 제공",
  "  // 실제 구현은 Build 도구나 별도 스크립트에서 사용": "  // 실제 구현은 Build Tool나 별도 Script에서 사용",
  " * Development 도구 - 컴포넌트 사용 현황 분석": " * Development Tool - Component 사용 현황 Analysis",
  "`HTML ${tag} Tag를 ${component} Component로 Change`": "`HTML ${tag} Tag를 ${component} Component로 Change`",
  "reason: `HTML ${tag} 태그를 ${component} 컴포넌트로 변경`": "reason: `HTML ${tag} Tag를 ${component} Component로 Change`",
  "// HTML 태그 → 컴포넌트 변환 제안": "// HTML Tag → Component Conversion 제안",
  " * 자동 Modify 제안 Create": " * Auto Modify 제안 Create",
  "'HTML Tag를 사용하고 있지만 Musashi Component를 import하지 않았습니다.',": "'HTML Tag를 사용하고 있지만 Musashi Component를 import하지 않았습니다.',",
  "message: 'HTML 태그를 사용하고 있지만 Musashi 컴포넌트를 import하지 않았습니다.',": "message: 'HTML Tag를 사용하고 있지만 Musashi Component를 import하지 않았습니다.',",
  "* 컴포넌트 import 체커": "* Component import 체커",
  "📚 자세한 Guide: /COMPONENT_GUIDELINES.md": "📚 자세한 Guide: /COMPONENT_GUIDELINES.md",
  "- 타이포그래피: Typography 컴포넌트": "- 타이포그래피: Typography Component",
  "- 간격: theme.spacing 또는 Tailwind 클래스": "- Interval: theme.spacing 또는 Tailwind 클래스",
  "- 색상: theme.ts 또는 Typography color prop": "- 색상: theme.ts 또는 Typography color prop",
  "✅ 권장:": "✅ 권장:",
  "❌ 인라인 스타일 사용: ${forbiddenProps.join(', ')}": "❌ 인라인 스타Day 사용: ${forbiddenProps.join(', ')}",
  " * Development 환경에서 스타일 사용 Warning": " * Development Environment에서 스타Day 사용 Warning",
  "✅ 권장: <${recommendation}>": "✅ 권장: <${recommendation}>",
  "❌ 지양: <${element}>": "❌ 지양: <${element}>",
  " * 컴포넌트 사용 Guide를 콘솔에 출력": " * Component 사용 Guide를 콘솔에 Output",
  "  // 금지된 인라인 스타일 Properties들": "  // 금지된 인라인 스타Day Properties들",
  "// 권장 컴포넌트 매핑": "// 권장 Component Mapping",
  "// 금지된 HTML 태그들 (컴포넌트로 대체해야 함)": "// 금지된 HTML Tag들 (Component로 대체해야 함)",
  " * Development 중 컴포넌트 사용 Rules 준수를 돕는 유틸리티": " * Development 중 Component 사용 Rules 준수를 돕는 유틸리티",
  "// JSON이 아닌 경우 원본 반환": "// JSON이 아닌 경우 원본 반환",
  "'#6e7781'     // 회색": "'#6e7781'     // 회색",
  "null: '#6e7781'     // 회색": "null: '#6e7781'     // 회색",
  "'#0550ae', // 진한 파란색": "'#0550ae', // 진한 파란색",
  "boolean: '#0550ae', // 진한 파란색": "boolean: '#0550ae', // 진한 파란색",
  "'#0550ae',  // 진한 파란색": "'#0550ae',  // 진한 파란색",
  "number: '#0550ae',  // 진한 파란색": "number: '#0550ae',  // 진한 파란색",
  "'#0a7ea4',  // 파란색": "'#0a7ea4',  // 파란색",
  "string: '#0a7ea4',  // 파란색": "string: '#0a7ea4',  // 파란색",
  "'#0550ae',     // 진한 파란색": "'#0550ae',     // 진한 파란색",
  "key: '#0550ae',     // 진한 파란색": "key: '#0550ae',     // 진한 파란색",
  "// JSON 구문 강조": "// JSON 구문 강조",
  "// JSON 파싱 및 포맷팅": "// JSON 파싱 및 포맷팅",
  "// JSON 구문 강조를 위한 함수": "// JSON 구문 강조를 위한 함수",
  "              <strong>Tip:</strong> Ctrl 키는 Windows/Linux에서, Cmd 키는 macOS에서 사용됩니다.": "              <strong>Tip:</strong> Ctrl Key는 Windows/Linux에서, Cmd Key는 macOS에서 사용됩니다.",
  "        { keys: ['자동'], description: '매 1분마다 자동 Save' },": "        { keys: ['Auto'], description: '매 1Minute마다 Auto Save' },",
  "      title: '자동 Save',": "      title: 'Auto Save',",
  "        { keys: ['Ctrl/Cmd', 'E'], description: '워크플로우 Export' },": "        { keys: ['Ctrl/Cmd', 'E'], description: '워크플로우 Export' },",
  "        { keys: ['Ctrl/Cmd', 'S'], description: '워크플로우 Save' },": "        { keys: ['Ctrl/Cmd', 'S'], description: '워크플로우 Save' },",
  "title: '파일 작업',": "title: 'File Task',",
  "        { keys: ['Delete'], description: 'Select된 노드 Delete' },": "        { keys: ['Delete'], description: 'Select된 노드 Delete' },",
  "        { keys: ['Ctrl/Cmd', 'Y'], description: 'Redo (대체)' },": "        { keys: ['Ctrl/Cmd', 'Y'], description: 'Redo (대체)' },",
  "      title: 'Edit 작업',": "      title: 'Edit Task',",
  "// OutputItem 컴포넌트": "// OutputItem Component",
  "}]  // 정확히 1개의 output (고정)": "}]  // 정확히 1개의 output (고정)",
  "      nodeData.connected_inputs = []  // 빈 배열로 Start (다른 노드로부터 받을 입력)": "      nodeData.connected_inputs = []  // 빈 Array로 Start (다른 노드로부터 받을 Input)",
  "    // Function 노드의 경우 connected_inputs와 outputs Add": "    // Function 노드의 경우 connected_inputs와 outputs Add",
  "'query'  // servers 필드 Remove": "'query'  // servers 필드 Remove",
  "        mode: 'query'  // servers 필드 Remove": "        mode: 'query'  // servers 필드 Remove",
  "      nodeData.connected_inputs = []  // 빈 배열로 Start (Agent로부터 받을 입력)": "      nodeData.connected_inputs = []  // 빈 Array로 Start (Agent로부터 받을 Input)",
  "    // MCP 노드의 경우 connected_inputs, parameters와 outputs Add": "    // MCP 노드의 경우 connected_inputs, parameters와 outputs Add",
  "      nodeData.outputs = []  // 빈 배열로 Start, connected_outputs에서 자동 Create됨": "      nodeData.outputs = []  // 빈 Array로 Start, connected_outputs에서 Auto Create됨",
  "    // Final Output 노드의 경우 connected_outputs Add": "    // Final Output 노드의 경우 connected_outputs Add",
  "type: 'postgresql',  // 기본값": "type: 'postgresql',  // DefaultValue",
  "    // Knowledge Base 노드의 경우 parameters Add": "    // Knowledge Base 노드의 경우 parameters Add",
  "type: 'mongodb'  // 기본값": "type: 'mongodb'  // DefaultValue",
  "    // Vector Store 노드의 경우 parameters Add": "    // Vector Store 노드의 경우 parameters Add",
  "    // Agent 노드의 경우 connected_inputs, outputs, parameters Add": "    // Agent 노드의 경우 connected_inputs, outputs, parameters Add",
  "    // User Input 노드의 경우 기본 output Add": "    // User Input 노드의 경우 Default output Add",
  "''  // memo 필드 Add": "''  // memo 필드 Add",
  "      memo: ''  // memo 필드 Add": "      memo: ''  // memo 필드 Add",
  "label,  // name 필드에 Default label Value Save": "label,  // name 필드에 Default label Value Save",
  "      name: label,  // name 필드에 기본 label 값 Save": "      name: label,  // name 필드에 Default label Value Save",
  "node.properties?.name || node.label, // name이 없으면 label을 DefaultValue으로": "node.properties?.name || node.label, // name이 없으면 label을 DefaultValue으로",
  "name: node.properties?.name || node.label, // name이 없으면 label을 기본값으로": "name: node.properties?.name || node.label, // name이 없으면 label을 DefaultValue으로",
  "                    고급스러운 Shadow 효과가 Apply된 프리미엄 카드입니다.": "                    고급스러운 Shadow Effect가 Apply된 프리미엄 카드입니다.",
  "테두리가 있는 이미지 카드입니다. 이미지 높이를 커스텀할 수 있습니다.": "테두리가 있는 Image 카드입니다. Image 높이를 커스텀할 수 있습니다.",
  "                    이미지가 포함된 카드입니다. Hover effect가 Apply되어 있습니다.": "                    Image가 포함된 카드입니다. Hover effect가 Apply되어 있습니다.",
  "            Musashi의 디자인 시스템 컴포넌트들을 Confirm하고 Testing할 수 있습니다.": "            Musashi의 디자인 Hour스템 Component들을 Confirm하고 Testing할 수 있습니다.",
  "            다양한 Info를 담은 네 번째 카드입니다.": "            다양한 Info를 담은 네 번째 카드입니다.",
  "<Typography variant=\"h4\" className=\"mb-2\">네 번째 슬라이드</Typography>": "<Typography variant=\"h4\" className=\"mb-2\">네 번째 슬라이드</Typography>",
  "흥미로운 내용이 포함된 세 번째 카드입니다.": "흥미로운 내용이 포함된 세 번째 카드입니다.",
  "<Typography variant=\"h4\" className=\"mb-2\">세 번째 슬라이드</Typography>": "<Typography variant=\"h4\" className=\"mb-2\">세 번째 슬라이드</Typography>",
  "매력적인 콘텐츠가 담긴 두 번째 카드입니다.": "매력적인 콘텐츠가 담긴 두 번째 카드입니다.",
  "<Typography variant=\"h4\" className=\"mb-2\">두 번째 슬라이드</Typography>": "<Typography variant=\"h4\" className=\"mb-2\">두 번째 슬라이드</Typography>",
  "아름다운 이미지와 함께하는 첫 번째 카드입니다.": "아름다운 Image와 함께하는 첫 번째 카드입니다.",
  "<Typography variant=\"h4\" className=\"mb-2\">첫 번째 슬라이드</Typography>": "<Typography variant=\"h4\" className=\"mb-2\">첫 번째 슬라이드</Typography>",
  "// Carousel 아이템들": "// Carousel 아이템들",
  "// 샘플 이미지 URL들 (placeholder 서비스 사용)": "// 샘플 Image URL들 (placeholder Service 사용)",
  "setInputError('최소 3글자 이상 입력해주세요.');": "setInputError('Minimum 3글자 이상 Input해주세요.');",
  "echo \"Log 파일 위치: $(pwd)/logs/local-ci.log\" | tee -a $LOG_FILE": "echo \"Log File 위치: $(pwd)/logs/local-ci.log\" | tee -a $LOG_FILE",
  "    echo -e \"\\n${GREEN}✅ CI 재현 Testing Success${NC}\" | tee -a $LOG_FILE": "    echo -e \"\\n${GREEN}✅ CI 재현 Testing Success${NC}\" | tee -a $LOG_FILE",
  "    echo -e \"자세한 Log는 logs/local-ci.log 파일을 Confirm하세요.\" | tee -a $LOG_FILE": "    echo -e \"자세한 Log는 logs/local-ci.log File을 Confirm하세요.\" | tee -a $LOG_FILE",
  "    echo -e \"\\n${RED}❌ CI 재현 Testing Failed${NC}\" | tee -a $LOG_FILE": "    echo -e \"\\n${RED}❌ CI 재현 Testing Failed${NC}\" | tee -a $LOG_FILE",
  "최종 종료 Code 결정": "최종 종료 Code 결정",
  "# 최종 종료 코드 결정": "# 최종 종료 Code 결정",
  "echo \"백엔드 Testing: $([ $BACKEND_EXIT_CODE -eq 0 ] && echo -e \"${GREEN}PASS${NC}\" || echo -e \"${RED}FAIL${NC}\")\" | tee -a $LOG_FILE": "echo \"Backend Testing: $([ $BACKEND_EXIT_CODE -eq 0 ] && echo -e \"${GREEN}PASS${NC}\" || echo -e \"${RED}FAIL${NC}\")\" | tee -a $LOG_FILE",
  "echo -e \"\\n${YELLOW}📊 Testing 결과 요약${NC}\" | tee -a $LOG_FILE": "echo -e \"\\n${YELLOW}📊 Testing Result Summary${NC}\" | tee -a $LOG_FILE",
  "# 결과 요약": "# Result Summary",
  "echo \"Frontend Testing 실행 중...\" | tee -a $LOG_FILE": "echo \"Frontend Testing Execute 중...\" | tee -a $LOG_FILE",
  "# Testing 실행": "# Testing Execute",
  "echo -e \"${GREEN}✅ Frontend 린트 Passed${NC}\" | tee -a $LOG_FILE": "echo -e \"${GREEN}✅ Frontend 린트 Passed${NC}\" | tee -a $LOG_FILE",
  "    echo -e \"${RED}❌ Frontend 린트 Failed${NC}\" | tee -a $LOG_FILE": "    echo -e \"${RED}❌ Frontend 린트 Failed${NC}\" | tee -a $LOG_FILE",
  "echo \"Frontend 린트 실행 중...\" | tee -a $LOG_FILE": "echo \"Frontend 린트 Execute 중...\" | tee -a $LOG_FILE",
  "린트 먼저 Execute (CI와 동Day한 순서)": "린트 먼저 Execute (CI와 동Day한 순서)",
  "# 린트 먼저 실행 (CI와 동일한 순서)": "# 린트 먼저 Execute (CI와 동Day한 순서)",
  "echo \"Frontend 의존성 Confirm 중...\" | tee -a $LOG_FILE": "echo \"Frontend Dependencies Confirm 중...\" | tee -a $LOG_FILE",
  "Node.js dependencies 설치 Confirm": "Node.js dependencies 설치 Confirm",
  "# Node.js dependencies 설치 Confirm": "# Node.js dependencies 설치 Confirm",
  "cd ../frontend  # frontend 디렉토리로 이동": "cd ../frontend  # frontend Directory로 이동",
  "echo -e \"${YELLOW}🧪 Frontend Testing 실행 (CI 환경과 동일)${NC}\" | tee -a $LOG_FILE": "echo -e \"${YELLOW}🧪 Frontend Testing Execute (CI Environment과 동Day)${NC}\" | tee -a $LOG_FILE",
  "# Frontend Testing 실행": "# Frontend Testing Execute",
  "    echo -e \"${GREEN}✅ 백엔드 Testing Passed${NC}\" | tee -a $LOG_FILE": "    echo -e \"${GREEN}✅ Backend Testing Passed${NC}\" | tee -a $LOG_FILE",
  "    echo -e \"${RED}❌ 백엔드 Testing Failed (Exit code: $BACKEND_EXIT_CODE)${NC}\" | tee -a $LOG_FILE": "    echo -e \"${RED}❌ Backend Testing Failed (Exit code: $BACKEND_EXIT_CODE)${NC}\" | tee -a $LOG_FILE",
  "echo \"백엔드 Testing 실행 중...\" | tee -a $LOG_FILE": "echo \"Backend Testing Execute 중...\" | tee -a $LOG_FILE",
  "echo -e \"${GREEN}✅ 백엔드 린트 Passed${NC}\" | tee -a $LOG_FILE": "echo -e \"${GREEN}✅ Backend 린트 Passed${NC}\" | tee -a $LOG_FILE",
  "    echo -e \"${RED}❌ 백엔드 린트 Failed${NC}\" | tee -a $LOG_FILE": "    echo -e \"${RED}❌ Backend 린트 Failed${NC}\" | tee -a $LOG_FILE",
  "echo \"백엔드 린트 실행 중...\" | tee -a $LOG_FILE": "echo \"Backend 린트 Execute 중...\" | tee -a $LOG_FILE",
  "echo \"Python 의존성 Confirm 중...\" | tee -a $LOG_FILE": "echo \"Python Dependencies Confirm 중...\" | tee -a $LOG_FILE",
  "Python Dependencies 설치 Confirm": "Python Dependencies 설치 Confirm",
  "# Python 의존성 설치 Confirm": "# Python Dependencies 설치 Confirm",
  "cd ../  # backend 디렉토리로 이동": "cd ../  # backend Directory로 이동",
  "echo -e \"${YELLOW}🧪 백엔드 Testing 실행 (CI 환경과 동일)${NC}\" | tee -a $LOG_FILE": "echo -e \"${YELLOW}🧪 Backend Testing Execute (CI Environment과 동Day)${NC}\" | tee -a $LOG_FILE",
  "# 백엔드 Testing 실행": "# Backend Testing Execute",
  "echo \"대기 중... ($i/30)\" | tee -a $LOG_FILE": "echo \"Wait 중... ($i/30)\" | tee -a $LOG_FILE",
  "echo \"MongoDB가 준비될 때까지 대기 중...\" | tee -a $LOG_FILE": "echo \"MongoDB가 준비될 때까지 Wait 중...\" | tee -a $LOG_FILE",
  "MongoDB가 준비될 때까지 Wait": "MongoDB가 준비될 때까지 Wait",
  "# MongoDB가 준비될 때까지 대기": "# MongoDB가 준비될 때까지 Wait",
  "            echo -e \"${RED}❌ MongoDB 컨테이너 Start Failed${NC}\" | tee -a $LOG_FILE": "            echo -e \"${RED}❌ MongoDB Container Start Failed${NC}\" | tee -a $LOG_FILE",
  "        echo \"MongoDB Docker 컨테이너 Start 중...\" | tee -a $LOG_FILE": "        echo \"MongoDB Docker Container Start 중...\" | tee -a $LOG_FILE",
  "    # MongoDB 컨테이너가 없으면 Start": "    # MongoDB Container가 없으면 Start",
  "    echo -e \"${RED}❌ MongoDB Connect Failed. Docker Compose로 MongoDB Start 중...${NC}\" | tee -a $LOG_FILE": "    echo -e \"${RED}❌ MongoDB Connect Failed. Docker Compose로 MongoDB Start 중...${NC}\" | tee -a $LOG_FILE",
  "# MongoDB 서비스 Confirm": "# MongoDB Service Confirm",
  "echo -e \"${YELLOW}📋 환경 Info Confirm${NC}\" | tee -a $LOG_FILE": "echo -e \"${YELLOW}📋 Environment Info Confirm${NC}\" | tee -a $LOG_FILE",
  "Environment Variables Settings (CI와 동Day)": "Environment Variables Settings (CI와 동Day)",
  "# Environment Variables Settings (CI와 동일)": "# Environment Variables Settings (CI와 동Day)",
  "echo -e \"${YELLOW}🔧 CI 환경 재현 스크립트 Start${NC}\"": "echo -e \"${YELLOW}🔧 CI Environment 재현 Script Start${NC}\"",
  "Log File Second기화": "Log File Second기화",
  "# Log 파일 초기화": "# Log File Second기화",
  "# Log 디렉토리 Create": "# Log Directory Create",
  "set -e  # 에러 발생시 즉시 중단": "set -e  # 에러 발생Hour 즉Hour 중단",
  "CI Environment 재현 Script - GitHub Actions와 동Day한 Environment으로 로컬 Testing Execute": "CI Environment 재현 Script - GitHub Actions와 동Day한 Environment으로 로컬 Testing Execute",
  "# CI 환경 재현 스크립트 - GitHub Actions와 동일한 환경으로 로컬 Testing 실행": "# CI Environment 재현 Script - GitHub Actions와 동Day한 Environment으로 로컬 Testing Execute",
  "    // 데이터베이스 상태 Confirm": "    // Database Status Confirm",
  "\"$2b$12$example.hash\", // 실제로는 해Hour된 비밀Number": "\"$2b$12$example.hash\", // 실제로는 해Hour된 비밀Number",
  "hashed_password: \"$2b$12$example.hash\", // 실제로는 해시된 비밀번호": "hashed_password: \"$2b$12$example.hash\", // 실제로는 해Hour된 비밀Number",
  "        // Testing 사용자 Create": "        // Testing User Create",
  "    // Development 환경용 샘플 데이터 삽입": "    // Development Environment용 샘플 Data 삽입",
  "sparse: true, // null 값 허용": "sparse: true, // null Value Allow",
  "// 공유 토큰 인덱스 (유니크)": "// 공유 Token 인덱스 (유니크)",
  "    // Create/Modify 시간 복합 인덱스": "    // Create/Modify Time 복합 인덱스",
  "    // 워크플로우 이름 텍스트 Search 인덱스": "    // 워크플로우 Name 텍스트 Search 인덱스",
  "// 팀 ID 인덱스": "// 팀 ID 인덱스",
  "// 워크플로우 소유자 인덱스": "// 워크플로우 소유자 인덱스",
  "    // workflows 컬렉션 Create 및 인덱스 설정": "    // workflows 컬렉션 Create 및 인덱스 Settings",
  "    // Create 시간 인덱스 (TTL 가능)": "    // Create Time 인덱스 (TTL 가능)",
  "    // 사용자 이름에 인덱스 Create": "    // User Name에 인덱스 Create",
  "    // 사용자 이메일에 유니크 인덱스 Create": "    // User 이메Day에 유니크 인덱스 Create",
  "    // users 컬렉션 Create 및 인덱스 설정": "    // users 컬렉션 Create 및 인덱스 Settings",
  "// 기본 컬렉션 Create 및 인덱스 설정": "// Default 컬렉션 Create 및 인덱스 Settings",
  "    // 관리자 계정이 설정된 경우 애플리케이션 전용 사용자 Create": "    // Management자 계정이 Settings된 경우 애플리케이션 전용 User Create",
  "// Development용 사용자 Create (프로덕션에서는 Security을 위해 Modify 필요)": "// Development용 User Create (Production에서는 Security을 위해 Modify 필요)",
  "// musashi 데이터베이스로 전환": "// musashi Database로 전환",
  "// 환경 변수에서 데이터베이스 이름 Import": "// Environment Variables에서 Database Name Import",
  "// 이 스크립트는 컨테이너 Start시 자동으로 실행됩니다": "// 이 Script는 Container StartHour Auto으로 Execute됩니다",
  "// MongoDB 초기화 스크립트 - 사용자 및 권한 설정": "// MongoDB Second기화 Script - User 및 Permission Settings",
  "    echo -e \"\\n${GREEN}🎉 모든 CI 검사가 Success했습니다!${NC}\"": "    echo -e \"\\n${GREEN}🎉 모든 CI Inspection가 Success했습니다!${NC}\"",
  "    echo -e \"${YELLOW}🔧 문제를 해결한 후 Redo하세요.${NC}\"": "    echo -e \"${YELLOW}🔧 Problem를 Resolve한 후 Redo하세요.${NC}\"",
  "    echo -e \"\\n${RED}💥 총 $FAILED_COUNT 개의 검사가 Failed했습니다.${NC}\"": "    echo -e \"\\n${RED}💥 총 $FAILED_COUNT 개의 Inspection가 Failed했습니다.${NC}\"",
  "echo -e \"\\n🧹 Testing 환경 정리...\"": "echo -e \"\\n🧹 Testing Environment 정리...\"",
  "MongoDB Container 정리": "MongoDB Container 정리",
  "# MongoDB 컨테이너 정리": "# MongoDB Container 정리",
  "    echo -e \"${GREEN}✅ 앱 헬스체크 Success${NC}\"": "    echo -e \"${GREEN}✅ 앱 헬스체크 Success${NC}\"",
  "    echo -e \"${RED}❌ 앱 헬스체크 Failed${NC}\"": "    echo -e \"${RED}❌ 앱 헬스체크 Failed${NC}\"",
  "    echo -e \"${GREEN}✅ Frontend 린팅 Success${NC}\"": "    echo -e \"${GREEN}✅ Frontend 린팅 Success${NC}\"",
  "    echo -e \"${RED}❌ Frontend 린팅 Failed${NC}\"": "    echo -e \"${RED}❌ Frontend 린팅 Failed${NC}\"",
  "    echo -e \"${GREEN}✅ 백엔드 Testing Success${NC}\"": "    echo -e \"${GREEN}✅ Backend Testing Success${NC}\"",
  "    echo -e \"${RED}❌ 백엔드 Testing Failed${NC}\"": "    echo -e \"${RED}❌ Backend Testing Failed${NC}\"",
  "    echo -e \"${GREEN}✅ 백엔드 린팅 Success${NC}\"": "    echo -e \"${GREEN}✅ Backend 린팅 Success${NC}\"",
  "    echo -e \"${RED}❌ 백엔드 린팅 Failed${NC}\"": "    echo -e \"${RED}❌ Backend 린팅 Failed${NC}\"",
  "echo -e \"\\n${YELLOW}📋 CI 재현 결과 요약${NC}\"": "echo -e \"\\n${YELLOW}📋 CI 재현 Result Summary${NC}\"",
  "정리": "정리",
  "# 정리": "# 정리",
  "        docker compose exec -T musashi curl -v http://localhost:8080/ || echo \"직접 Connect Failed\"": "        docker compose exec -T musashi curl -v http://localhost:8080/ || echo \"직접 Connect Failed\"",
  "        echo \"대체 Connect Testing...\"": "        echo \"대체 Connect Testing...\"",
  "        echo -e \"${RED}❌ 앱 헬스체크 Failed${NC}\"": "        echo -e \"${RED}❌ 앱 헬스체크 Failed${NC}\"",
  "        echo -e \"${GREEN}✅ 앱 헬스체크 Success${NC}\"": "        echo -e \"${GREEN}✅ 앱 헬스체크 Success${NC}\"",
  "    echo \"앱 Connect Testing...\"": "    echo \"앱 Connect Testing...\"",
  "    # 앱 헬스체크 Testing (GitHub Actions와 동일한 방식)": "    # 앱 헬스체크 Testing (GitHub Actions와 동Day한 방식)",
  "echo \"=== 컨테이너 상태 ===\"": "echo \"=== Container Status ===\"",
  "    # 컨테이너 상태 Confirm": "    # Container Status Confirm",
  "    echo \"컨테이너 Start됨. 대기 중...\"": "    echo \"Container Start됨. Wait 중...\"",
  "echo \"Docker Compose 서비스 Start...\"": "echo \"Docker Compose Service Start...\"",
  "# 서비스 Start": "# Service Start",
  "기존 Container 정리": "기존 Container 정리",
  "# 기존 컨테이너 정리": "# 기존 Container 정리",
  "GitHub Actions CI와 동Day한 EnvironmentVariables Settings": "GitHub Actions CI와 동Day한 EnvironmentVariables Settings",
  "# GitHub Actions CI와 동일한 환경변수 Settings": "# GitHub Actions CI와 동Day한 EnvironmentVariables Settings",
  "echo -e \"\\n${YELLOW}🐳 Docker Compose 헬스체크 Testing...${NC}\"": "echo -e \"\\n${YELLOW}🐳 Docker Compose 헬스체크 Testing...${NC}\"",
  "Docker Build 및 컴포즈 Testing (GitHub Actions와 동Day)": "Docker Build 및 컴포즈 Testing (GitHub Actions와 동Day)",
  "# Docker Build 및 컴포즈 Testing (GitHub Actions와 동일)": "# Docker Build 및 컴포즈 Testing (GitHub Actions와 동Day)",
  "echo -e \"\\n🧪 Frontend Testing 실행 (커버리지 포함)...\"": "echo -e \"\\n🧪 Frontend Testing Execute (커버리지 포함)...\"",
  "Frontend Testing (커버리지 포함)": "Frontend Testing (커버리지 포함)",
  "# Frontend Testing (커버리지 포함)": "# Frontend Testing (커버리지 포함)",
  "    echo -e \"${GREEN}✅ Frontend 린팅 Passed${NC}\"": "    echo -e \"${GREEN}✅ Frontend 린팅 Passed${NC}\"",
  "echo -e \"\\n🔍 Frontend 린팅 검사...\"": "echo -e \"\\n🔍 Frontend 린팅 Inspection...\"",
  "Frontend 린팅": "Frontend 린팅",
  "# Frontend 린팅": "# Frontend 린팅",
  "echo -e \"${RED}❌ package-lock.json 파일을 찾을 수 없습니다.${NC}\"": "echo -e \"${RED}❌ package-lock.json File을 찾을 수 없습니다.${NC}\"",
  "echo -e \"\\n📦 Frontend 의존성 설치...\"": "echo -e \"\\n📦 Frontend Dependencies 설치...\"",
  "Frontend Dependencies 설치 (npm ci 사용)": "Frontend Dependencies 설치 (npm ci 사용)",
  "# Frontend 의존성 설치 (npm ci 사용)": "# Frontend Dependencies 설치 (npm ci 사용)",
  "Frontend 디렉터리 이동": "Frontend 디렉터리 이동",
  "# Frontend 디렉터리 이동": "# Frontend 디렉터리 이동",
  "Frontend Testing (GitHub Actions와 동Day한 순서)": "Frontend Testing (GitHub Actions와 동Day한 순서)",
  "# Frontend Testing (GitHub Actions와 동일한 순서)": "# Frontend Testing (GitHub Actions와 동Day한 순서)",
  "    echo -e \"${GREEN}✅ 백엔드 Testing Passed${NC}\"": "    echo -e \"${GREEN}✅ Backend Testing Passed${NC}\"",
  "echo -e \"\\n🧪 백엔드 Testing 실행...\"": "echo -e \"\\n🧪 Backend Testing Execute...\"",
  "    echo -e \"${GREEN}✅ 백엔드 린팅 Passed${NC}\"": "    echo -e \"${GREEN}✅ Backend 린팅 Passed${NC}\"",
  "echo -e \"\\n🔍 백엔드 린팅 검사...\"": "echo -e \"\\n🔍 Backend 린팅 Inspection...\"",
  "Backend 린팅 (GitHub Actions와 동Day)": "Backend 린팅 (GitHub Actions와 동Day)",
  "# 백엔드 린팅 (GitHub Actions와 동일)": "# Backend 린팅 (GitHub Actions와 동Day)",
  "echo -e \"${RED}❌ requirements.txt 파일을 찾을 수 없습니다.${NC}\"": "echo -e \"${RED}❌ requirements.txt File을 찾을 수 없습니다.${NC}\"",
  "echo -e \"\\n📦 백엔드 의존성 설치...\"": "echo -e \"\\n📦 Backend Dependencies 설치...\"",
  "Backend Dependencies 설치": "Backend Dependencies 설치",
  "# 백엔드 의존성 설치": "# Backend Dependencies 설치",
  "Backend 디렉터리 이동": "Backend 디렉터리 이동",
  "# 백엔드 디렉터리 이동": "# Backend 디렉터리 이동",
  "echo -e \"\\n${YELLOW}🔧 백엔드 Testing Start...${NC}\"": "echo -e \"\\n${YELLOW}🔧 Backend Testing Start...${NC}\"",
  "Backend Testing (GitHub Actions와 동Day한 순서)": "Backend Testing (GitHub Actions와 동Day한 순서)",
  "# 백엔드 Testing (GitHub Actions와 동일한 순서)": "# Backend Testing (GitHub Actions와 동Day한 순서)",
  "echo -e \"${RED}❌ Node.js가 설치되지 않았습니다.${NC}\"": "echo -e \"${RED}❌ Node.js가 설치되지 않았습니다.${NC}\"",
  "        echo -e \"${RED}⚠️  Warning: CI는 Node.js 20을 사용합니다. 현재 버전과 다를 수 있습니다.${NC}\"": "        echo -e \"${RED}⚠️  Warning: CI는 Node.js 20을 사용합니다. 현재 Version과 다를 수 있습니다.${NC}\"",
  "echo \"현재 Node.js 버전: v$(node --version | cut -d'v' -f2)\"": "echo \"현재 Node.js Version: v$(node --version | cut -d'v' -f2)\"",
  "echo -e \"\\n${YELLOW}📦 Node.js 환경 Confirm...${NC}\"": "echo -e \"\\n${YELLOW}📦 Node.js Environment Confirm...${NC}\"",
  "Node.js Version Confirm (CI에서는 20 사용)": "Node.js Version Confirm (CI에서는 20 사용)",
  "# Node.js 버전 Confirm (CI에서는 20 사용)": "# Node.js Version Confirm (CI에서는 20 사용)",
  "    echo -e \"${RED}⚠️  Warning: CI는 Python 3.12를 사용합니다. 현재 버전과 다를 수 있습니다.${NC}\"": "    echo -e \"${RED}⚠️  Warning: CI는 Python 3.12를 사용합니다. 현재 Version과 다를 수 있습니다.${NC}\"",
  "echo \"현재 Python 버전: $python_version\"": "echo \"현재 Python Version: $python_version\"",
  "echo -e \"\\n${YELLOW}🐍 Python 환경 Confirm...${NC}\"": "echo -e \"\\n${YELLOW}🐍 Python Environment Confirm...${NC}\"",
  "Python Version Confirm (CI에서는 3.12 사용)": "Python Version Confirm (CI에서는 3.12 사용)",
  "# Python 버전 Confirm (CI에서는 3.12 사용)": "# Python Version Confirm (CI에서는 3.12 사용)",
  "echo \"MongoDB Connect 대기중...\"": "echo \"MongoDB Connect Wait중...\"",
  "# MongoDB Connect 대기": "# MongoDB Connect Wait",
  "echo \"MongoDB 컨테이너가 이미 실행중입니다.\"": "echo \"MongoDB Container가 이미 Execute중입니다.\"",
  "0 || echo \"MongoDB Container가 이미 존재하거나 Execute 중입니다.\"": "0 || echo \"MongoDB Container가 이미 존재하거나 Execute 중입니다.\"",
  "7.0 || echo \"MongoDB Container가 이미 존재하거나 Execute 중입니다.\"": "7. 0 || echo \"MongoDB Container가 이미 존재하거나 Execute 중입니다.\"",
  "mongo:7.0 || echo \"MongoDB 컨테이너가 이미 존재하거나 실행 중입니다.\"": "mongo: 7. 0 || echo \"MongoDB Container가 이미 존재하거나 Execute 중입니다.\"",
  "    echo \"MongoDB 컨테이너 Start중...\"": "    echo \"MongoDB Container Start중...\"",
  "echo -e \"\\n${YELLOW}🍃 MongoDB 컨테이너 Confirm 및 Start...${NC}\"": "echo -e \"\\n${YELLOW}🍃 MongoDB Container Confirm 및 Start...${NC}\"",
  "MongoDB Container Confirm 및 Start": "MongoDB Container Confirm 및 Start",
  "# MongoDB 컨테이너 Confirm 및 Start": "# MongoDB Container Confirm 및 Start",
  "Environment Variables Settings (GitHub Actions와 동Day)": "Environment Variables Settings (GitHub Actions와 동Day)",
  "# Environment Variables Settings (GitHub Actions와 동일)": "# Environment Variables Settings (GitHub Actions와 동Day)",
  "echo \"📍 프로젝트 루트: $PROJECT_ROOT\"": "echo \"📍 Project 루트: $PROJECT_ROOT\"",
  "Project 루트 디렉터리 Confirm": "Project 루트 디렉터리 Confirm",
  "# 프로젝트 루트 디렉터리 Confirm": "# Project 루트 디렉터리 Confirm",
  "echo \"🔄 Musashi CI 재현 스크립트 Start...\"": "echo \"🔄 Musashi CI 재현 Script Start...\"",
  "더 많은 스크립트가 Add될 예정입니다.": "더 많은 Script가 Add될 예정입니다.",
  "- 상세한 Log Save": "- Detailed log saving",
  "- CI와 동일한 옵션으로 실행": "- CI와 동Day한 Option으로 Execute",
  "- Backend/Frontend Testing 실행": "- Backend/Frontend Testing Execute",
  "- MongoDB 컨테이너 자동 Start": "- MongoDB Container Auto Start",
  "- Node.js 20 환경 검증": "- Node.js 20 Environment Validation",
  "- Python 3.12 환경 검증": "- Python 3.12 Environment Validation",
  "# ## 기능": "# ## Feature",
  "CI 환경을 로컬에서 재현하는 스크립트입니다.": "CI Environment을 로컬에서 재현하는 Script입니다.",
  "Manual Execute도 가능": "Manual Execute도 가능",
  "# Manual Execute도 가능": "# Manual Execute도 가능",
  "workflow_dispatch: # 수동 실행도 가능": "workflow_dispatch: # Manual Execute도 가능",
  "- cron: '0 9 * * 1' # 매주 월요일 오전 9시": "- cron: '0 9 * * 1' # 매주 Month요Day 오전 9Hour",
  "정기적으로 실행하려면 GitHub Actions workflow를 Add하세요:": "정기적으로 Execute하려면 GitHub Actions workflow를 Add하세요:",
  "# ## 자동화 (GitHub Actions)": "# ## Automation (GitHub Actions)",
  "### Examples 출력": "# ## Examples Output",
  "- `jq` JSON 프로세서 설치": "- `jq` JSON 프로세서 설치",
  "- Save소에 대한 쓰기 권한": "- Save소에 대한 쓰기 Permission",
  "- GitHub CLI (`gh`) 설치 및 인증": "- GitHub CLI (`gh`) 설치 및 Authentication",
  "필요 사항": "필요 사항",
  "# 필요 사항": "# 필요 사항",
  "## 필요 사항": "# # 필요 사항",
  "# ## 필요 사항": "# # # 필요 사항",
  "- 상세한 결과 요약": "- 상세한 Result Summary",
  "- 컬러풀한 진행 상황 표시": "- 컬러Pull한 Progress Situation 표Hour",
  "- 브랜치 자동 Delete": "- Branch Auto Delete",
  "- 머지 가능한 PR을 자동으로 머지": "- 머지 가능한 PR을 Auto으로 머지",
  "- 각 PR을 자동으로 승인(approve)": "- 각 PR을 Auto으로 Approval(approve)",
  "- \"dependencies\" 또는 \"deps\" 라벨이 붙은 PR 감지": "- \"dependencies\" 또는 \"deps\" 라벨이 붙은 PR 감지",
  "- Dependabot 또는 Renovate bot이 Create한 PR 자동 감지": "- Dependabot 또는 Renovate bot이 Created PR Auto 감지",
  "의존성 Update PR들을 자동으로 승인하고 머지하는 스크립트입니다.": "Dependencies Update PR들을 Auto으로 Approval하고 머지하는 Script입니다.",
  "유용한 자동화 스크립트 모음": "Collection of useful automation scripts",
  "# 스크립트 실행": "# Script Execute",
  "        log_info \"Log Monitoring을 Start합니다... (Ctrl+C로 중단)\"": "        log_info \"Log Monitoring을 Start합니다... (Ctrl+C로 중단)\"",
  "echo \"  데이터와 함께 정리: docker-compose -f $COMPOSE_FILE down -v\"": "echo \"  Data와 함께 정리: docker-compose -f $COMPOSE_FILE down -v\"",
  "    echo \"  컨테이너 상태 Confirm: docker-compose -f $COMPOSE_FILE ps\"": "    echo \"  Container Status Confirm: docker-compose -f $COMPOSE_FILE ps\"",
  "    echo \"  컨테이너 Log View: docker-compose -f $COMPOSE_FILE logs -f\"": "    echo \"  Container Log View: docker-compose -f $COMPOSE_FILE logs -f\"",
  "log_info \"유용한 명령어들:\"": "log_info \"유용한 Command들:\"",
  "echo \"🌐 웹 애플리케이션: http://localhost:8080\"": "echo \"🌐 Web 애플리케이션: http://localhost:8080\"",
  "    log_success \"=== Musashi 접속 Info ===\"": "    log_success \"=== Musashi 접속 Info ===\"",
  "    # 접속 Info 표시": "    # 접속 Info 표Hour",
  "        log_warning \"헬스체크 타임아웃. Log를 Confirm하세요.\"": "        log_warning \"헬스체크 Timeout. Log를 Confirm하세요.\"",
  "log_info \"대기 중... ($attempt/$max_attempts)\"": "log_info \"Wait 중... ($attempt/$max_attempts)\"",
  "            log_success \"서비스가 정상적으로 Start되었습니다! 🎉\"": "            log_success \"Service가 정상적으로 Start되었습니다! 🎉\"",
  "log_info \"서비스 헬스체크 대기 중...\"": "log_info \"Service 헬스체크 Wait 중...\"",
  "헬스체크 Wait": "헬스체크 Wait",
  "# 헬스체크 대기": "# 헬스체크 Wait",
  "    log_info \"컨테이너 상태 Confirm 중...\"": "    log_info \"Container Status Confirm 중...\"",
  "    # 상태 Confirm": "    # Status Confirm",
  "        log_error \"Docker Compose Start에 Failed했습니다!\"": "        log_error \"Docker Compose Start에 Failed했습니다!\"",
  "    # 컨테이너 Start": "    # Container Start",
  "        log_info \"  - Redis Development 서버: docker-compose -f $COMPOSE_FILE --profile redis up -d\"": "        log_info \"  - Redis Development Server: docker-compose -f $COMPOSE_FILE --profile redis up -d\"",
  "        log_info \"  - Frontend Development 서버: docker-compose -f $COMPOSE_FILE --profile frontend-dev up -d\"": "        log_info \"  - Frontend Development Server: docker-compose -f $COMPOSE_FILE --profile frontend-dev up -d\"",
  "        log_info \"Development 환경 옵션 서비스들:\"": "        log_info \"Development Environment Option Service들:\"",
  "    log_info \"Docker Compose를 Start합니다...\"": "    log_info \"Docker Compose를 Start합니다...\"",
  "# Docker Compose 실행": "# Docker Compose Execute",
  "        log_info \"이미지를 강제로 재Build합니다...\"": "        log_info \"Image를 강제로 재Build합니다...\"",
  "    # Build 옵션 설정": "    # Build Option Settings",
  "정리 Option": "정리 Option",
  "# 정리 옵션": "# 정리 Option",
  "log_error \"$COMPOSE_FILE 파일을 찾을 수 없습니다!\"": "log_error \"$COMPOSE_FILE File을 찾을 수 없습니다!\"",
  "    # Compose 파일 존재 Confirm": "    # Compose File 존재 Confirm",
  "    # 환경 변수 파일 Confirm": "    # Environment Variables File Confirm",
  "    # 의존성 Confirm": "    # Dependencies Confirm",
  "log_info \"환경: $ENVIRONMENT ($COMPOSE_FILE)\"": "log_info \"Environment: $ENVIRONMENT ($COMPOSE_FILE)\"",
  "    # Compose 파일 Select": "    # Compose File Select",
  "log_error \"알 수 없는 옵션: $1\"": "log_error \"알 수 없는 Option: $1\"",
  "명령행 인수 Process": "명령행 인수 Process",
  "# 명령행 인수 처리": "# 명령행 인수 Process",
  "    # 기본값 Settings": "    # DefaultValue Settings",
  "메인 함수": "메인 함수",
  "# 메인 함수": "# 메인 함수",
  "log_success \"정리 완료\"": "log_success \"정리 Complete\"",
  "log_info \"미사용 Docker 이미지 정리 중...\"": "log_info \"미사용 Docker Image 정리 중...\"",
  "미사용 Image 정리": "미사용 Image 정리",
  "# 미사용 이미지 정리": "# 미사용 Image 정리",
  "Name이 지정된 Volume 정리": "Name이 지정된 Volume 정리",
  "# 이름이 지정된 볼륨 정리": "# Name이 지정된 Volume 정리",
  "        log_warning \"볼륨을 Delete합니다... (데이터가 손실될 수 있습니다)\"": "        log_warning \"Volume을 Delete합니다... (Data가 손실될 수 있습니다)\"",
  "    read -p \"데이터 볼륨도 Delete하시겠습니까? (y/N): \" -n 1 -r": "    read -p \"Data Volume도 Delete하Hour겠습니까? (y/N): \" -n 1 -r",
  "    # 볼륨 정리 (Select적)": "    # Volume 정리 (Select적)",
  "        log_info \"실행 중인 컨테이너를 Stop합니다...\"": "        log_info \"Execute 중인 Container를 Stop합니다...\"",
  "    # 실행 중인 Stop container": "    # Execute 중인 Stop container",
  "log_info \"기존 컨테이너 및 볼륨 정리 중...\"": "log_info \"기존 Container 및 Volume 정리 중...\"",
  "Container 및 Volume 정리": "Container 및 Volume 정리",
  "# 컨테이너 및 볼륨 정리": "# Container 및 Volume 정리",
  "log_success \"모든 의존성이 준비되었습니다\"": "log_success \"모든 Dependencies이 준비되었습니다\"",
  "        log_error \"Docker Desktop을 Start하거나 Docker 서비스를 Start하세요.\"": "        log_error \"Docker Desktop을 Start하거나 Docker Service를 Start하세요.\"",
  "log_error \"Docker 데몬이 실행되고 있지 않습니다!\"": "log_error \"Docker 데몬이 Execute되고 있지 않습니다!\"",
  "    # Docker 데몬 실행 Confirm": "    # Docker 데몬 Execute Confirm",
  "log_error \"https://docs.docker.com/compose/install/ 에서 Docker Compose를 설치하세요.\"": "log_error \"https://docs.docker.com/compose/install/ 에서 Docker Compose를 설치하세요.\"",
  "log_error \"Docker Compose가 설치되어 있지 않습니다!\"": "log_error \"Docker Compose가 설치되어 있지 않습니다!\"",
  "log_error \"https://docs.docker.com/get-docker/ 에서 Docker를 설치하세요.\"": "log_error \"https://docs.docker.com/get-docker/ 에서 Docker를 설치하세요.\"",
  "log_error \"Docker가 설치되어 있지 않습니다!\"": "log_error \"Docker가 설치되어 있지 않습니다!\"",
  "    log_info \"의존성 Confirm 중...\"": "    log_info \"Dependencies Confirm 중...\"",
  "Docker 및 Docker Compose Confirm": "Docker 및 Docker Compose Confirm",
  "# Docker 및 Docker Compose Confirm": "# Docker 및 Docker Compose Confirm",
  "            log_warning \"Security을 위해 .env 파일에서 SECRET_KEY를 변경해주세요.\"": "            log_warning \"Security을 위해 .env File에서 SECRET_KEY를 Change해주세요.\"",
  "log_warning \"⚠️  기본 SECRET_KEY가 사용되고 있습니다!\"": "log_warning \"⚠️  Default SECRET_KEY가 사용되고 있습니다!\"",
  "log_success \".env 파일이 존재합니다\"": "log_success \".env File이 존재합니다\"",
  "log_error \"환경 변수 설정 파일이 필요합니다.\"": "log_error \"Environment Variables Settings File이 필요합니다.\"",
  "log_error \".env.example 파일도 찾을 수 없습니다!\"": "log_error \".env.example File도 찾을 수 없습니다!\"",
  "            log_warning \"특히 프로덕션 환경에서는 Security을 위해 모든 기본값을 변경해주세요.\"": "            log_warning \"특히 Production Environment에서는 Security을 위해 모든 DefaultValue을 Change해주세요.\"",
  "            log_warning \"⚠️  .env 파일을 열어서 SECRET_KEY 등 Required 값들을 설정하세요!\"": "            log_warning \"⚠️  .env File을 열어서 SECRET_KEY 등 Required Value들을 Settings하세요!\"",
  "            log_info \".env.example에서 .env 파일을 Create합니다...\"": "            log_info \".env.example에서 .env File을 Create합니다...\"",
  "log_warning \".env 파일이 없습니다\"": "log_warning \".env File이 없습니다\"",
  "# 환경 변수 파일 Confirm": "# Environment Variables File Confirm",
  "  - 볼륨 문제: --clean 옵션으로 볼륨 정리 후 재Start": "  - Volume Problem: --clean Option으로 Volume 정리 후 재Start",
  "  - 권한 문제: sudo 없이 Docker 실행 가능한지 Confirm": "  - Permission Problem: sudo 없이 Docker Execute 가능한지 Confirm",
  "- 포트 충돌: .env에서 MUSASHI_PORT 변경": "- Port Conflict: .env에서 MUSASHI_PORT Change",
  "문제 해결:": "Problem Resolve:",
  "  3. 필요시 포트 및 Database Settings 조정": "  3. 필요Hour Port 및 Database Settings 조정",
  "  2. SECRET_KEY 등 Required 값 설정": "  2. SECRET_KEY 등 Required Value Settings",
  "  1. .env.example을 .env로 Copy": "  1. .env.example을 .env로 Copy",
  "환경 변수 설정:": "Environment Variables Settings:",
  "  $0 dev --clean --logs  # Development 환경, 정리 후 Start, Log Monitoring": "  $0 dev --clean --logs  # Development Environment, 정리 후 Start, Log Monitoring",
  "  $0 prod --rebuild      # 프로덕션 환경, 이미지 재Build": "  $0 prod --rebuild      # Production Environment, Image 재Build",
  "  $0 dev                 # Development 환경으로 Start  ": "  $0 dev                 # Development Environment으로 Start  ",
  "  $0                     # 프로덕션 환경으로 Start": "  $0                     # Production Environment으로 Start",
  "--help     이 도움말 표시": "--help     이 Help말 표Hour",
  "  --logs     Start 후 Log Monitoring  ": "  --logs     Start 후 Log Monitoring  ",
  "  --clean    기존 컨테이너/볼륨 정리 후 Start": "  --clean    기존 Container/Volume 정리 후 Start",
  "  --rebuild  이미지 강제 재Build": "  --rebuild  Image 강제 재Build",
  "옵션:": "Option:",
  "  dev        Development 환경 (docker-compose.dev.yml)": "  dev        Development Environment (docker-compose.dev.yml)",
  "prod       프로덕션 환경 (docker-compose.yml)": "prod       Production Environment (docker-compose.yml)",
  "환경:": "Environment:",
  "🚀 Musashi Docker Compose 빠른 Start 도구": "🚀 Musashi Docker Compose 빠른 Start Tool",
  "Help말 표Hour": "Help말 표Hour",
  "# 도움말 표시": "# Help말 표Hour",
  "Log 함수들": "Log 함수들",
  "# Log 함수들": "# Log 함수들",
  "set -e  # 에러 발생시 스크립트 중단": "set -e  # 에러 발생Hour Script 중단",
  "--help     - Help말 표Hour": "--help     - Help말 표Hour",
  "# --help     - 도움말 표시": "# --help     - Help말 표Hour",
  "--logs     - Start 후 Log Monitoring": "--logs     - Start 후 Log Monitoring",
  "#   --logs     - Start 후 Log Monitoring": "# --logs     - Start 후 Log Monitoring",
  "--clean    - 기존 Container/Volume 정리 후 Start": "--clean    - 기존 Container/Volume 정리 후 Start",
  "#   --clean    - 기존 컨테이너/볼륨 정리 후 Start": "# --clean    - 기존 Container/Volume 정리 후 Start",
  "--rebuild  - Image 강제 재Build": "--rebuild  - Image 강제 재Build",
  "#   --rebuild  - 이미지 강제 재Build": "# --rebuild  - Image 강제 재Build",
  "# 옵션:": "# Option:",
  "#   build      - Build Testing 환경": "# build      - Build Testing Environment",
  "#   dev        - Development 환경": "# dev        - Development Environment",
  "# prod       - Production 환경 (기본값)": "# prod       - Production Environment (DefaultValue)",
  "# 환경:": "# Environment:",
  "Musashi Docker Compose 빠른 Start Script": "Musashi Docker Compose 빠른 Start Script",
  "# Musashi Docker Compose 빠른 Start 스크립트": "# Musashi Docker Compose 빠른 Start Script"
}